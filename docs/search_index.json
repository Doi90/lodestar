[
["index.html", "lodestar A collection of guides and tutorials I’ve put together 1 What is lodestar?", " lodestar A collection of guides and tutorials I’ve put together David Wilkinson 2020-08-19 1 What is lodestar? A lodestar is a star used as a guide for navigation by ship (like Polaris, the North Star), but I was just after a short, snappy name for the GitHub repository that somehow related to the guides/tutorials I put together over time. ¯\\(ツ)/¯ The collection of guides and tutorials found in lodestar are things I’ve put together for various workshops/meetups or guides that I felt were lacking elsewhere. New guides will get added sporadically. lodestar is now living as a GitHub page via bookdown now that RawGit has been shut down. "],
["fitting-occupancy-models-with-unmarked.html", "2 Fitting occupancy models with unmarked 2.1 Occupancy Modelling with Imperfect Detection 2.2 unmarked Models 2.3 Load Package 2.4 Load Data 2.5 Standardising Data 2.6 Missing Data Considerations 2.7 Fitting a Model 2.8 Model Selection 2.9 Proportion of Area Occupied 2.10 Prediction 2.11 Model Evaluation 2.12 Common Errors 2.13 Additional resources", " 2 Fitting occupancy models with unmarked 2.1 Occupancy Modelling with Imperfect Detection Site occupancy surveys are frequently used in the monitoring of species. Site occupancy probabilities can be used as a metric when monitoring the current state of a population. This could be for overall changes in occupancy or the expansion/contraction of species distributions. The premise being that changes in site occupancy are correlated with changes in population size and characteristics. However, field surveys face the problem of imperfect detection; there is no guarantee that each individual, or even each species, will be detected at a site even if it is present. The detectability of a species can be defined as the probability that at least one individual is detected in a particular sampling effort, conditional to the species being present in the area of interest during sampling. To be able to estimate the effect of imperfect detection we need to perform several independent surveys of the same site. 2.1.1 The Maths A single species, single season occupancy model like we will cover today can be seen as a hierarchical model with two processes: The state process: defined by the true site occupancy status (site occupied by the species or not) The observation process: given the occupancy status, was the species detected The true occupancy status of a site, which is unknown, is represented by the latent variable \\(z_i\\), which takes the value \\(1\\) if site \\(i\\) is occupied, or \\(0\\) otherwise, and is modelled as: \\[z_i \\sim Bernoulli(\\psi_i)\\] where \\(\\psi_i\\) is the probability of occupancy. The observation process is modelled as: \\[y_{ij} | z_i \\sim Bernoulli(z_i * p_{ij})\\] where \\(y_{ij}\\) is our detection data site \\(i\\) and sampling repeat \\(j\\), and \\(p_{ij}\\) is the probability of detecting the species given it is present. As written, these equations effectively assume the probabilities of occupancy and detection are constant across all sites, when in reality sites are heterogeneous. Covariates can be incorporated into the model using a logit-link function (like in generalised linear regression), such that the occupancy and/or detectability at site \\(i\\) can be modelled as a function of a series of covariates \\(\\{x_{i1}, ..., x_{ik}\\}\\). \\[logit(\\psi_i) = \\beta_0 + \\beta_1x_{i1} + \\beta_2x_{i2} ... \\beta_kx_{ik}\\] \\[logit(p_i) = \\beta_0 + \\beta_1x_{i1} + \\beta_2x_{i2} ... \\beta_kx_{ik}\\] The four main assumptions of this model are: A site is closed to changes in occupancy over the survey season The probability of occupancy is constant across all sites, or the variation is modelled by covariates The probability of detection is constant across all sites and surveys, or the variation is modelled by covariates The detection of a species and its detection histories at each site are independent unmarked is an R package developed by Ian Fiske and Richard Chandler (and contributed to by Marc Kéry, Andy Royle, David Miller amongst others) to help users fit models accounting for the imperfect detection of unmarked individuals. 2.2 unmarked Models unmarked is able to fit several different models under this banner. This ranges from standard occupancy models to distance sampling and colonisation extinction models. While this guide will only cover occu() for standard occupancy models, only minimal adjustment is required to fit the others Model FittingFunction Data Occupancy occu unmarkedFrameOccu Royle-Nichols occuRN unmarkedFrameOccu False Positives occuFP unmarkedFrameOccuFP Point Count pcount unmarkedFramePCount Generalised Point Count gpcount unmarkedFrameGPC Open Point Count pcountOpen unmarkedFramePCO Distance Sampling distsamp unmarkedFrameDS Generalized Distance Sampling gdistsamp unmarkedFrameGDS Arbitrary multinomial Poisson multinomPois unmarkedFrameMPois Colinization Extinction colext unmarkedMultFrame Generalized multinomial mixture gmultmix unmarkedFrameGMM 2.3 Load Package library(unmarked) 2.4 Load Data For this guide we will use a sample dataset supplied with the package. data &lt;- read.csv(system.file(&quot;csv&quot;, &quot;widewt.csv&quot;, package = &quot;unmarked&quot;)) site y.1 y.2 y.3 elev forest length date.1 date.2 date.3 ivel.1 ivel.2 ivel.3 1 0 0 0 -1.1729446 -1.1562281 1.8245493 -1.7614815 0.3099471 1.3813757 -0.5060353 -0.5060353 -0.5060353 2 0 0 0 -1.1265010 -0.5014837 1.6292405 -2.9043386 -1.0471958 0.5956614 -0.9336151 -0.9907486 -1.1621491 3 0 0 0 -0.1976283 -0.1013621 1.4586150 -1.6900529 -0.4757672 1.4528042 -1.1355754 -1.3388644 -1.6099164 4 0 0 0 -0.1047411 0.0077620 1.6863990 -2.1900529 -0.6900529 1.2385185 -0.8193481 -0.9272669 -1.1970640 5 0 0 0 -1.0336137 -1.1926028 1.2809338 -1.8329101 0.1670899 1.3813757 0.6375563 0.8803737 1.0422520 6 0 0 0 -0.8478392 0.9171292 1.8082888 -2.6186243 0.1670899 1.3813757 -1.3288666 -1.0422624 -0.8989603 7 0 0 0 -0.9097640 -1.0834788 1.6292405 -2.6900529 -1.1900529 1.5956614 -1.4478167 -1.5620837 -1.6763507 8 0 0 0 -1.0026513 -0.7924812 1.3083328 -2.1186243 -0.4757672 1.4528042 -0.3205880 -0.5568428 -0.6355944 9 1 1 0 -0.0582974 0.5533823 1.3350011 -2.0471958 -0.5471958 1.1670899 -0.2314744 -0.2314744 -0.0014368 10 0 0 1 -0.6311022 0.8080052 2.0412203 -2.3329101 -1.1186243 -0.2614815 -1.0968537 -1.0211703 -0.8319620 11 0 0 0 0.0655522 1.7901218 1.1314021 -1.6900529 0.4528042 1.4528042 -0.2240538 0.0579277 -0.2240538 12 0 0 0 -1.1110198 -0.6469825 1.4816045 -1.8329101 -0.3329101 1.9528042 0.4168132 0.2843674 0.5492591 13 0 0 0 -0.2595532 0.8443799 1.7917595 -0.9043386 1.0956614 1.2385185 -1.3535464 -1.0136020 -1.1592924 14 0 0 0 -0.6465834 -0.3196103 1.8245493 -2.5471958 -0.2614815 1.3099471 -1.1169952 -0.2240538 -0.7880168 15 1 0 0 0.1894019 -0.1013621 1.8082888 -1.3329101 0.3099471 1.5242328 -0.2779847 -0.1824500 0.0086195 16 1 1 0 0.1429583 1.1353774 1.5040774 -1.8329101 -1.0471958 0.5242328 -0.4826413 -0.8840994 -0.8193481 17 0 0 0 -1.2348694 0.3715089 1.8245493 -2.3329101 -0.9757672 2.3099471 -1.0699983 -1.2579860 -1.2109891 18 1 1 1 -0.9716889 -0.1377368 1.9315214 -2.4043386 -0.8329101 0.6670899 -1.1149519 -0.7348899 -0.4815152 19 0 0 0 -1.2193882 -0.9743547 1.5260563 -1.3329101 -0.2614815 1.5242328 -0.8615772 -1.1149519 -0.9882645 20 0 1 0 0.3132516 1.5718737 1.3083328 0.0242328 1.5242328 3.2385185 -0.2418364 -0.2418364 -0.3993396 21 0 0 0 -1.0026513 0.0805113 1.7404662 -1.6900529 -0.2614815 1.5956614 -0.4615119 -0.6148703 -0.4615119 22 0 0 0 0.0191086 -0.6106078 1.3862944 -1.9757672 -0.4757672 1.2385185 -0.3579950 -0.2123046 0.7346833 23 1 1 1 0.4835449 0.6988811 1.7047481 -0.4757672 0.5956614 1.6670899 0.4168132 0.6817050 0.6393223 24 0 0 0 -0.3988841 -1.0471041 1.4586150 -2.4043386 -0.9757672 0.5242328 -0.4579454 -1.5421534 -1.4337326 25 0 0 0 -0.8633204 -1.1562281 1.2237754 -2.6186243 -0.5471958 0.5242328 1.8659267 1.8830668 0.9232239 26 0 0 0 -0.9871701 -0.2832356 1.4350845 -2.7614815 -0.6186243 0.8813757 -0.2643369 0.5681799 -0.2643369 27 1 0 1 -0.5536962 0.7716305 1.6677068 -1.1900529 0.4528042 2.5956614 0.4268092 0.7016968 0.4817867 28 1 1 1 0.0655522 1.1353774 1.7227666 -0.6186243 0.5242328 2.3099471 -0.4204338 -0.2643369 -0.1082400 29 1 1 1 0.0036274 0.2987595 1.6292405 -1.0471958 0.4528042 2.0956614 0.9517906 1.4088587 1.2374582 30 0 0 0 -0.6930271 0.1896354 1.8245493 -2.1900529 -0.6186243 0.3099471 0.9038722 0.9132716 1.0542623 31 0 0 0 -0.9252452 -1.0834788 1.6486586 -2.9043386 -0.9757672 1.4528042 -1.6972264 -1.7532612 -1.5851568 32 0 0 0 -1.0645761 -1.1562281 1.7047481 -1.7614815 -0.5471958 -0.4043386 -1.0665803 -1.5433854 -1.4374287 33 0 0 0 0.1429583 0.6261317 1.7227666 -1.3329101 -0.2614815 1.3099471 -0.8366922 -0.4724661 -0.6389694 34 0 0 0 -0.3834029 0.1168860 1.4350845 -2.1186243 -0.1186243 0.5956614 0.5681799 0.1519215 0.1519215 35 0 0 0 -1.0336137 0.5170076 1.4109870 -0.7614815 -0.1900529 0.5956614 0.2229900 -0.6298321 -0.2034210 36 1 1 NA 1.0099061 -0.7197319 1.6677068 1.0956614 2.8813757 NA 0.9765844 0.0419665 NA 37 1 1 1 1.1801994 0.9898786 1.6292405 0.4528042 1.3813757 2.1670899 0.9517906 1.1231912 1.1803247 38 1 1 1 -0.1357035 1.7173724 1.2809338 -2.1186243 -0.2614815 1.5956614 0.3947389 -0.0099567 0.1519215 39 0 0 NA 1.2885679 -1.2653522 1.5475625 1.5956614 2.0956614 NA 0.3379093 0.5858931 NA 40 0 0 0 -0.6001398 -1.0834788 1.8405496 -2.1900529 -1.2614815 1.0956614 -0.7268462 -1.0968537 -1.0043518 41 1 1 1 0.8550940 0.8443799 1.2809338 -0.4757672 1.3099471 1.9528042 -0.8193481 -0.7384089 -0.9812264 42 0 0 0 -0.0892599 2.2993675 1.1939225 -1.8329101 -0.7614815 0.5956614 0.2402188 0.2402188 0.6817050 43 0 0 0 -0.8633204 -0.0649874 1.3862944 -2.3329101 -0.6186243 1.4528042 -0.1394594 -0.1394594 0.2976120 44 0 0 0 -0.9097640 0.6625064 2.1517622 -1.8329101 -0.8329101 0.5956614 -1.5082719 -1.6437979 -1.4743904 45 1 1 1 1.0253873 -0.6469825 1.9315214 0.0956614 0.6670899 1.5956614 -0.1014531 -0.2281405 -0.1014531 46 0 0 0 -0.3834029 -0.6833572 1.7749524 -1.8329101 -1.0471958 0.5956614 -0.5394907 -0.6876505 -0.7370371 47 1 1 1 -0.9871701 0.9171292 1.4586150 -1.9043386 -0.2614815 2.5956614 0.8973145 0.4907365 0.4907365 48 0 0 0 -1.1729446 -1.1926028 1.8082888 -1.8329101 -0.1186243 2.1670899 -0.3735194 -0.4690541 -0.6601236 49 1 1 1 0.3442140 0.6261317 1.7404662 -1.9757672 -0.4043386 1.5956614 -0.3081535 -0.3081535 -0.3081535 50 0 0 0 -0.4453277 0.8443799 1.9315214 -2.1186243 -0.6186243 0.5242328 -1.1994101 -0.9038063 -1.1571810 51 1 1 1 0.4371013 0.5533823 1.7749524 -2.1900529 -0.5471958 1.5242328 -0.9839701 -0.5888773 -0.8358103 52 0 0 NA 1.0408685 -0.8288559 1.5040774 -0.5471958 0.8099471 NA -0.0423324 -0.2365863 NA 53 0 0 0 0.3751764 -0.2104862 1.3083328 -2.6186243 -0.8329101 0.5956614 0.0731699 0.5456795 0.2306731 54 0 0 0 -0.8942828 -0.6833572 1.5892352 -1.6900529 -1.1900529 -0.5471958 -1.0968537 -1.2157847 -1.0373882 55 0 0 0 -0.9716889 1.7537471 1.1631508 -2.3329101 -0.2614815 0.5242328 0.3340346 0.4250911 0.7893172 56 0 0 0 -0.6620647 1.6082484 1.3862944 -2.4043386 -1.3329101 0.3813757 0.6618381 0.7346833 0.5161476 57 1 1 1 0.9479812 0.5897570 1.7404662 -0.4757672 1.0956614 1.6670899 -0.2059146 0.1008021 -0.0014368 58 0 0 0 -0.7704331 -0.9743547 1.8082888 -2.6900529 -0.7614815 0.3813757 -1.5677034 -1.5199360 -1.6154707 59 0 0 1 -0.2905156 0.3715089 1.4350845 -2.9043386 -1.0471958 0.0956614 0.5681799 0.5681799 0.5681799 60 0 0 0 -1.0181325 -1.0834788 1.8405496 -2.4043386 -1.2614815 0.4528042 -1.0968537 -1.0506028 -1.1893556 61 0 0 0 -0.6465834 1.0626280 1.5686159 -1.9757672 -0.9757672 -0.4757672 -0.3944176 -0.3944176 -0.2123046 62 0 0 0 -1.2503507 -0.7561065 2.2407097 -2.4043386 0.0956614 1.6670899 -1.2119890 -1.2739849 -1.4909707 63 0 0 NA 2.3722526 -1.2653522 0.6418539 2.6670899 3.2385185 NA 0.9187133 0.4586383 NA 64 0 0 0 -0.8168768 -1.2653522 1.6292405 -2.2614815 -0.6186243 0.1670899 -0.0194790 -0.3622800 -0.8193481 65 0 0 0 -0.8013955 -0.1741115 1.6677068 -2.3329101 -0.2614815 0.6670899 -0.1229661 0.2068991 0.7016968 66 1 1 0 -0.6930271 -0.6469825 1.9315214 -2.4043386 -0.9757672 1.0242328 -0.7348899 -0.2281405 -0.2281405 67 0 0 0 -1.1110198 1.0990027 1.5260563 -2.4043386 -0.6186243 -0.1900529 -0.6715462 -0.6715462 -0.6715462 68 0 0 0 -1.2658319 -0.1741115 1.8718022 -2.5471958 -1.1900529 0.5956614 -0.4756681 -0.6101516 -0.5204959 69 0 0 0 -1.4361252 -1.2653522 1.4350845 -1.8329101 -0.2614815 0.6670899 0.4294271 0.9844384 0.9844384 70 0 0 NA 1.1801994 -1.0834788 1.6292405 1.5956614 2.6670899 NA 0.6661231 0.6661231 NA 71 0 0 NA 1.9232975 -1.2653522 1.4109870 2.4528042 3.0242328 NA -0.4166265 -0.9851746 NA 72 0 0 1 0.2203643 1.1353774 1.7578579 -1.9043386 -0.9757672 0.8099471 -0.8026021 -0.9030782 -0.9030782 73 0 0 0 -0.6001398 -0.9743547 1.6863990 -1.9757672 -0.4757672 1.3099471 -0.1718350 -0.1718350 0.1519215 74 0 0 0 -1.0955385 1.4627496 2.1282317 -2.0471958 -0.5471958 0.5956614 -0.7846599 -0.8887245 -1.0968537 75 0 0 0 -1.1884258 1.2081268 1.9600948 -2.2614815 -0.2614815 1.5242328 -0.7919884 -0.6688697 -0.5457510 76 1 1 1 1.1801994 1.3536255 1.3862944 0.7385185 1.7385185 2.8813757 -0.7950663 -1.0136020 -0.7222211 77 1 1 1 0.6073946 2.1902434 1.6677068 -1.8329101 -0.9043386 0.1670899 0.6467193 0.5917417 0.2068991 78 1 1 1 1.0873121 0.8080052 1.7404662 -0.2614815 1.5956614 2.5956614 -0.3081535 0.3052799 -0.1036757 79 0 0 0 0.1739207 1.0626280 1.3862944 -2.1900529 0.4528042 1.4528042 0.2976120 0.2976120 0.0062311 80 1 1 1 0.2513268 0.3351342 1.5040774 -1.8329101 -0.7614815 -0.1186243 1.3821964 0.6051807 0.3461755 81 1 0 0 -0.4608089 0.3351342 1.5686159 -2.9043386 -1.1900529 -0.4757672 -0.3944176 -0.2123046 -0.3944176 82 0 0 0 -0.7239895 -0.0286127 1.9600948 -2.6900529 -1.2614815 0.3099471 -0.6688697 -0.5457510 -0.4226323 83 0 0 0 -0.8478392 -0.5014837 1.6863990 -2.4043386 -0.7614815 0.5242328 0.4756781 0.4756781 0.6375563 84 0 0 0 -1.1265010 -0.4287343 1.5686159 -1.8329101 -0.8329101 0.4528042 -0.9407568 -0.9407568 -0.9407568 85 0 NA NA 1.8304102 -1.2289775 2.1860513 0.4528042 1.5956614 NA -0.6010852 NA NA 86 1 1 1 0.7312443 0.2987595 1.6094379 -1.9043386 -0.8329101 0.5956614 0.7346833 0.5598548 0.0353692 87 1 1 1 1.3504927 -0.1741115 1.4109870 0.5242328 1.3099471 1.6670899 1.0758121 0.8626066 1.0758121 88 0 0 0 -0.6001398 -0.3196103 1.5686159 -2.4043386 -0.9757672 0.5956614 -0.2123046 0.3340346 -0.0301915 89 0 NA NA -0.6930271 -1.0107294 1.7227666 -2.9043386 -0.9043386 1.0956614 -1.5131121 NA NA 90 0 0 0 -1.0645761 1.8992459 1.8405496 -2.7614815 -1.4043386 0.0242328 -0.9581009 -1.1431046 -0.2643369 91 0 0 0 -0.5227338 0.5170076 1.5686159 -2.3329101 -0.5471958 1.3813757 0.5161476 0.7589650 0.8196694 92 0 0 0 -1.1265010 0.1532607 2.0281482 -2.1900529 -0.5471958 1.0956614 -0.6915494 -0.6148703 -0.6148703 93 1 1 1 -0.2595532 2.1174940 1.6863990 -2.4043386 -1.1900529 -0.2614815 -0.1718350 0.3677592 -0.0639162 94 0 0 0 0.4216201 0.4806329 1.5475625 -0.1900529 1.1670899 1.6670899 0.0899256 0.2139175 0.2139175 95 0 0 0 -0.5072525 -0.8652306 1.1939225 -2.2614815 -1.6900529 0.3813757 -0.7310508 -0.4661591 -0.5544564 96 1 0 1 0.0965147 1.3900002 1.8245493 -2.2614815 -0.8329101 0.1670899 0.4809000 0.1989185 0.6218907 97 0 0 0 -0.9407264 -0.8288559 1.7749524 -1.9043386 -0.9043386 1.0956614 -1.4284494 -1.1321298 -1.2802896 98 1 1 1 0.4990261 0.2623848 1.7227666 -0.2614815 1.0956614 1.7385185 -0.0041754 0.2559861 0.6722445 99 0 0 0 0.3751764 -0.3196103 1.5892352 -0.9757672 -0.4757672 0.7385185 -0.4427333 -0.2643369 0.2708525 100 0 0 0 -0.6156210 -0.7924812 1.1631508 -2.1900529 -1.1900529 0.5242328 -0.3944176 0.0608650 -0.3944176 101 0 0 0 -1.0955385 -1.1926028 1.5040774 -2.4043386 -0.9043386 -0.1186243 -0.3660889 -1.1431046 -1.2726072 102 0 0 NA 1.3969363 -0.7197319 1.4816045 1.3099471 3.2385185 NA -0.3116390 -0.0467473 NA 103 1 1 1 1.3040491 0.6988811 1.7578579 -0.7614815 1.3813757 3.1670899 0.1519215 0.1519215 -0.1997451 104 1 1 1 0.8860564 1.4263749 1.7047481 -0.2614815 0.3813757 1.5956614 0.4168132 0.7346833 -0.0070135 105 1 1 1 0.7002819 0.3715089 1.4586150 -0.4043386 0.4528042 1.5242328 0.5584995 0.9650775 0.5584995 106 0 0 0 -0.8323580 0.9535039 1.7749524 -2.3329101 -0.8329101 0.6670899 -0.1937846 -0.2925578 -0.1443980 107 0 0 0 -1.0026513 -0.0649874 1.7047481 -2.5471958 -1.6186243 0.5242328 -0.4308402 -0.1659485 -0.2189269 108 0 0 0 -0.8013955 0.6988811 1.2527630 -1.9757672 -0.5471958 0.5956614 -0.3475886 0.0353692 -0.0978335 109 1 1 1 0.2822892 1.2445015 1.2527630 -0.8329101 0.5242328 1.6670899 0.9844384 0.9844384 0.9844384 110 0 0 0 0.1739207 0.4442583 1.9459101 -1.6186243 -1.1186243 1.5956614 -1.0136020 -1.0552278 -1.0136020 111 0 0 0 -0.7859143 -1.0834788 1.8718022 -1.1900529 -0.9757672 0.0956614 -1.1480855 -1.0584298 -1.1480855 112 0 0 0 -1.0800573 0.0441367 2.0412203 -2.3329101 -0.2614815 1.0956614 -0.6049119 -0.2643369 -0.4913869 113 1 1 1 1.2730867 0.9171292 1.5686159 1.2385185 1.5956614 1.9528042 0.8803737 1.2445999 1.2445999 114 0 1 1 -0.5846586 1.3536255 1.1939225 -1.9757672 -0.1900529 0.5242328 -0.5544564 -0.0246729 0.2402188 115 0 0 0 -0.2595532 -0.2104862 1.5260563 -2.3329101 -0.5471958 1.4528042 -0.3548278 -0.4815152 -0.6082025 116 0 0 0 -0.7704331 -1.0107294 1.7227666 -1.9757672 -0.5471958 0.5956614 -0.5244984 -0.4724661 -0.8366922 117 0 0 0 -1.0645761 -1.0107294 1.4586150 -2.3329101 -0.9043386 0.6670899 0.3552105 0.6940255 1.0328405 118 0 0 0 -1.2039070 -0.7924812 1.4586150 -2.3329101 -0.9757672 0.6670899 -0.7289974 -0.7289974 -0.3224194 119 0 0 0 -1.3277567 -1.1926028 2.1162555 -2.3329101 -1.0471958 0.5956614 -1.3927482 -1.4980666 -1.2172176 120 1 1 1 0.3442140 -0.6833572 1.6863990 -0.3329101 2.6670899 2.7385185 -0.0099567 -0.0099567 0.1519215 121 0 0 0 -0.9097640 0.9898786 1.3862944 -2.3329101 -0.8329101 0.5956614 0.0062311 0.4433024 0.3704572 122 0 0 0 -1.1574634 -0.9379800 1.9600948 -1.8329101 -0.2614815 0.6670899 -0.9971862 -0.5047114 -0.4226323 123 0 0 0 -1.1884258 0.0805113 2.0014800 -2.3329101 -0.4043386 0.6670899 -1.1081039 -0.8718491 -0.9899765 124 0 0 0 -1.0336137 1.3172508 1.7404662 -2.5471958 -0.5471958 0.1670899 -0.5126314 -0.6659897 -0.6148703 125 1 1 1 1.1647182 0.2260101 1.5686159 2.1670899 3.0956614 3.5242328 1.9730521 1.7909390 1.6088260 126 1 0 NA 0.5919134 -0.5742331 1.0986123 1.8813757 3.0242328 NA 3.0657304 3.0657304 NA 127 0 0 0 -0.7394707 -0.3923596 1.9021075 -2.5471958 -1.1900529 0.8813757 -0.4134444 -0.2829753 0.1084318 128 0 0 0 -1.1419822 -0.9016053 1.8718022 -2.6900529 -0.5471958 -0.2614815 -0.8342907 -0.6549794 -0.8522218 129 0 0 0 -1.0800573 -1.2653522 1.8082888 -1.9757672 0.3099471 0.8099471 -1.3766339 -1.3766339 -1.4244013 130 0 0 0 -1.0645761 1.2808761 1.8245493 -2.6900529 -0.8329101 0.8813757 -0.6470261 0.0579277 0.2459154 131 1 1 1 1.0408685 0.3715089 1.7749524 1.0956614 1.5956614 2.0956614 -0.9839701 -0.5394907 -0.5394907 132 0 0 0 -1.0645761 -0.6106078 1.4350845 -2.7614815 -1.3329101 1.3813757 -0.6805953 -1.0274773 -0.8193481 133 0 0 0 -1.0800573 -0.5378584 1.8718022 -2.7614815 -1.0471958 0.5242328 -1.1480855 -1.1480855 -1.1480855 134 0 0 0 -1.1419822 -1.1562281 1.6094379 -2.4043386 -0.9043386 1.0956614 -1.0136020 -0.6639449 -0.6639449 135 0 0 0 -0.5536962 -0.5378584 1.8082888 -1.9757672 -0.6186243 1.3099471 0.1041542 0.1041542 0.5818278 136 0 0 0 -0.7859143 0.0441367 1.4586150 -2.2614815 -1.1900529 0.5242328 1.1683665 1.5071815 1.1006035 137 0 0 0 -0.8788016 -0.5742331 1.6863990 -2.5471958 -0.5471958 0.7385185 -1.1215209 -0.3337133 -0.1610431 138 1 0 0 0.8086503 0.0077620 1.2809338 0.5956614 1.5242328 1.6670899 0.5566172 0.3137998 0.8803737 139 0 0 0 -0.4298465 1.8992459 1.9459101 -2.6900529 -0.1900529 0.8099471 -1.0968537 -0.8887245 -0.8470986 140 1 1 1 0.1119959 0.5897570 1.7578579 -0.9043386 -0.4757672 0.5242328 -0.6518878 -0.6518878 -0.6518878 141 0 0 0 -0.4143653 -0.5014837 1.4350845 -1.1186243 -0.1186243 1.5242328 0.5681799 0.9844384 2.6494720 142 0 0 0 -0.9871701 -0.8652306 1.8082888 -2.4043386 -0.1900529 2.0242328 -0.4690541 -0.1824500 -0.1824500 143 0 0 0 -1.1265010 -0.2104862 1.5475625 -2.3329101 -0.6186243 0.8813757 -1.0879971 -0.7160215 -0.9020093 144 0 0 0 -1.0955385 0.7352558 1.5892352 -2.8329101 -0.9757672 0.7385185 -0.0859404 -0.0264749 0.5087145 145 0 1 NA 1.0873121 -0.1013621 1.9315214 0.7385185 2.1670899 NA -0.7348899 -0.4815152 NA 146 1 0 1 0.3442140 -0.1013621 1.5040774 -1.0471958 -0.4757672 1.0956614 -0.0423324 -0.0423324 0.1519215 147 0 0 0 -1.0955385 -1.1562281 1.6486586 -1.9757672 -0.5471958 0.5956614 -1.2489481 -1.4170525 -1.3610177 148 0 0 NA -0.5382150 0.8443799 1.6094379 -0.7614815 0.0956614 1.3099471 -0.3725641 -0.3142879 NA 149 0 1 1 1.1956806 0.0441367 1.4816045 1.1670899 2.1670899 3.1670899 1.0128196 1.1452655 1.2777113 150 0 0 0 0.7467255 1.8628712 1.6094379 -0.1900529 1.3099471 2.1670899 -0.0811832 -0.3725641 -0.4424955 151 0 1 1 0.0500710 1.4627496 1.5260563 -2.6900529 -0.5471958 1.4528042 0.3419525 0.2152652 0.6586709 152 1 0 0 -1.2348694 -0.4287343 1.7578579 -1.9043386 -0.6186243 0.5956614 -0.4509355 -0.5514116 -0.5514116 153 0 0 NA 1.0253873 -1.2653522 1.3350011 0.7385185 2.4528042 NA 1.2254301 1.2254301 NA 154 0 0 0 -0.3524404 1.3172508 1.9315214 -2.5471958 -0.2614815 2.1670899 -0.8615772 -0.8615772 -1.1149519 155 0 0 0 -0.4608089 1.2445015 1.9021075 -2.3329101 -1.0471958 0.6670899 -1.1962587 -0.9353206 -1.1527690 156 0 0 0 -1.0800573 -1.0471041 1.5260563 -1.8329101 -0.4757672 0.6670899 -0.4815152 -0.1014531 -0.1014531 157 0 0 0 -0.9716889 1.1717521 1.5892352 -1.7614815 -1.1186243 -0.2614815 0.8060419 0.8060419 0.8060419 158 0 0 0 -0.9716889 1.1717521 1.5892352 -1.7614815 -1.1186243 -0.2614815 0.8060419 0.8060419 0.8060419 159 0 0 0 -1.2967943 0.2623848 1.6094379 -2.4043386 -0.8329101 1.5956614 0.7346833 0.8512357 1.2008927 160 0 0 0 -0.9716889 1.3536255 1.7047481 -2.4043386 -0.8329101 1.1670899 -0.0599918 -0.0599918 0.0989432 161 0 0 0 0.2203643 1.6082484 1.3083328 -0.5471958 1.2385185 1.7385185 0.4669279 0.0731699 -0.0843332 162 0 0 0 -1.4206440 0.4442583 1.9878743 -2.7614815 -1.7614815 -0.1186243 -1.4846012 -1.2451101 -1.3249405 163 1 0 0 1.2885679 -0.3196103 1.4109870 0.9528042 2.3813757 3.8099471 1.5022232 1.5022232 1.0758121 164 0 0 0 -0.0737787 0.7716305 1.5892352 -2.3329101 -0.4043386 0.5956614 -0.2643369 -0.2643369 -0.3832678 165 1 0 NA 1.1337558 -0.6106078 1.4816045 -0.4043386 1.5956614 NA 0.6154820 0.6154820 NA 166 1 1 1 0.7002819 -0.0649874 1.0647107 0.0956614 1.5956614 3.3813757 3.0657304 3.2666827 2.9652542 167 0 0 0 0.5609510 -0.5014837 1.1939225 -0.4757672 0.5956614 1.7385185 -0.1129702 -0.3778619 -0.5544564 168 1 1 1 0.2513268 0.1532607 1.3862944 -0.5471958 -0.2614815 0.5956614 2.1187425 1.6088260 1.6088260 169 0 0 0 0.0036274 1.2445015 1.7047481 -1.6900529 -0.6186243 0.3813757 0.0989432 0.0989432 0.2578782 170 0 0 0 -0.5382150 0.2623848 1.7917595 -2.3329101 0.1670899 1.3099471 0.1519215 0.2976120 0.1033581 171 0 0 0 -0.9871701 2.2993675 1.7578579 -1.6186243 -0.2614815 0.5956614 -0.3504593 -0.6518878 -0.6016497 172 1 1 1 0.3596952 0.6261317 1.2527630 -2.1186243 -0.5471958 0.4528042 0.3184249 0.3184249 0.7346833 173 0 1 0 0.2203643 2.0083700 1.4816045 -2.1900529 -0.6186243 -0.2614815 -0.5103078 0.0856986 -0.1791931 174 1 0 1 -0.4453277 0.5533823 1.4109870 -2.2614815 -0.4757672 1.4528042 0.4361956 0.0097845 0.4361956 175 0 0 0 -0.9252452 0.6988811 1.5892352 -2.6900529 -1.6900529 -0.6186243 -0.0859404 -0.2643369 -0.4427333 176 0 0 0 -1.0490949 -0.9379800 1.6292405 -1.6186243 -1.0471958 -0.8329101 -0.3622800 -0.3622800 -0.3622800 177 1 1 1 0.0655522 0.5897570 1.6094379 -1.9043386 0.0956614 1.8813757 0.5015786 0.3850262 0.3850262 178 1 0 0 -0.7239895 0.0077620 1.6486586 -2.9043386 -0.2614815 0.4528042 0.7683042 0.6001998 1.1045129 179 0 0 0 0.9944249 0.8080052 1.3350011 0.5242328 2.1670899 2.5956614 2.7590137 1.3787884 1.8388635 180 0 0 0 -1.0181325 -0.6106078 1.7578579 -2.3329101 -1.0471958 -0.5471958 -0.4509355 -0.1997451 -0.0992689 181 1 1 NA 1.1027933 -0.8288559 1.5260563 1.5956614 3.0242328 NA 1.1020766 0.9120456 NA 182 0 0 0 0.7312443 -0.0286127 1.2237754 -0.6186243 0.6670899 2.0956614 0.0662213 -0.0194790 -0.4479803 183 0 0 0 0.3287328 1.2081268 1.4109870 -1.0471958 -0.2614815 0.4528042 1.2890177 1.2890177 1.5022232 184 0 0 0 0.3287328 1.0262533 1.5475625 -0.9757672 1.3813757 2.5956614 0.0279297 -0.9020093 -0.2820500 185 1 0 0 0.1739207 0.4806329 1.5040774 -1.8329101 -0.6186243 0.0956614 0.9936885 1.1231912 1.1231912 186 0 1 1 0.9789437 -0.0649874 1.2527630 -0.4757672 0.5242328 3.3813757 1.7337035 1.2341934 1.2341934 187 1 1 0 -0.0737787 2.0083700 1.6094379 -2.9043386 -1.0471958 0.0956614 0.4433024 0.2684739 0.5598548 188 0 0 0 -1.0800573 -0.0649874 1.7917595 -2.9043386 -1.6186243 -0.4043386 -0.1394594 0.1519215 -0.4308402 189 0 0 0 -0.2131096 0.0805113 1.3862944 -1.8329101 -0.4043386 0.6670899 0.7346833 0.7346833 0.5161476 190 0 0 0 -1.1884258 -0.9743547 1.2237754 -1.8329101 -0.2614815 1.9528042 -0.4479803 0.3233221 -0.4479803 191 1 1 1 1.3195303 0.0441367 1.5475625 -0.0471958 1.6670899 2.9528042 0.3999053 1.2678483 1.1438565 192 1 1 1 1.0873121 1.1353774 1.5260563 -0.6900529 0.8813757 1.7385185 0.6586709 0.5319836 0.2786089 193 0 0 0 -0.3524404 0.7716305 1.4109870 -1.6186243 -1.0471958 -0.4757672 1.1468807 0.5072641 1.2890177 194 0 0 0 -1.1265010 -1.2653522 1.7749524 -2.1900529 -1.1900529 0.8099471 -0.1937846 -0.0950114 0.0531484 195 0 0 0 -0.3524404 0.2260101 1.6094379 -2.9043386 -0.5471958 0.5956614 0.2101977 0.3850262 0.7346833 196 0 0 0 -0.1666659 1.0262533 2.2082744 -2.1186243 0.0242328 1.7385185 -0.7446350 -0.4884760 -0.3283766 197 0 0 NA 1.2421242 -1.2653522 1.7047481 1.7385185 2.3099471 NA -0.2719052 -0.8546670 NA 198 0 1 0 0.2668080 0.0077620 1.5475625 -1.8329101 0.0956614 1.5956614 -0.3440459 -0.2820500 -0.2820500 199 0 0 0 -0.9871701 -0.7561065 2.0149030 -1.8329101 -0.1900529 0.6670899 -0.8970497 -1.2078559 -0.9359004 200 0 0 0 -1.1729446 -1.2289775 1.9740810 -2.1900529 -0.9043386 0.5242328 -0.8193481 -1.3049829 -1.0621655 201 1 1 0 0.3751764 -0.2832356 1.3609766 -1.1186243 -0.1186243 1.3099471 1.4220433 1.4967564 1.5565268 202 0 0 NA 1.6446357 -1.2653522 1.8870696 0.6670899 1.6670899 NA -0.6427536 -0.9076453 NA 203 1 0 NA 1.2421242 -1.0471041 1.4109870 0.6670899 1.8813757 NA 2.3550453 2.3550453 NA 204 0 1 NA 1.7839666 -1.2653522 1.3350011 0.6670899 1.5956614 NA 1.3787884 0.9187133 NA 205 0 0 NA 1.3504927 -1.2289775 1.3609766 0.5956614 1.0956614 NA -0.0722176 -0.0722176 NA 206 1 1 1 0.0036274 0.8443799 1.4350845 -1.9757672 -0.9043386 0.3813757 1.1925676 1.2619440 1.3313204 207 1 0 NA 1.2885679 -0.9379800 1.4816045 1.5956614 2.5956614 NA 1.6088260 1.3439342 NA 208 1 1 NA 1.6136733 -0.7561065 1.5260563 1.6670899 2.2385185 NA -0.2914842 0.0252342 NA 209 1 1 NA 1.7530042 -1.1926028 1.4586150 2.3813757 2.8813757 NA 1.9815224 2.1848114 NA 210 1 1 1 1.5672297 -0.1741115 1.9169226 0.6670899 1.4528042 2.4528042 0.3233221 0.3233221 0.3233221 211 1 1 1 0.9170188 2.1174940 2.1400662 -0.1900529 0.5956614 1.3099471 -1.3564030 -1.0478821 -1.5278036 212 1 1 1 1.0099061 1.7173724 1.8718022 0.4528042 1.3099471 1.4528042 0.1070937 -0.1170454 0.0174380 213 1 1 1 1.0718309 1.6809977 1.8245493 0.3813757 0.5242328 1.3813757 -0.0360661 0.0579277 0.1049246 214 1 1 1 1.0253873 1.7173724 1.5260563 0.0956614 1.0242328 2.0242328 1.0387329 1.0387329 1.0387329 215 0 0 NA 1.9232975 -1.2653522 1.6677068 1.4528042 2.4528042 NA 0.4927822 0.4268092 NA 216 1 1 1 0.9944249 1.2445015 1.5475625 -0.2614815 0.8813757 1.5956614 1.2802475 0.9082719 0.7470825 217 1 1 1 1.0408685 0.6625064 1.7749524 0.8099471 1.4528042 2.9528042 0.2013081 0.2013081 0.4976277 218 0 0 NA 1.6601169 -1.2653522 1.2809338 2.0956614 3.2385185 NA 2.0944608 2.0944608 NA 219 0 0 NA 1.6601169 -1.2653522 1.4109870 0.4528042 2.8813757 NA -0.2034210 -0.2034210 NA 220 0 0 NA 1.9697411 -1.2653522 1.4586150 1.5956614 2.1670899 NA 1.7104705 1.7104705 NA 221 0 0 NA 1.8149290 -1.2653522 2.2300144 0.1670899 2.0956614 NA -0.5060353 -0.8820106 NA 222 0 0 NA 2.2793653 -1.2653522 0.6931472 2.3813757 3.4528042 NA 0.1519215 0.0062311 NA 223 0 0 NA 2.4341774 -1.2653522 1.6486586 2.3099471 2.5242328 NA 1.3286520 1.1605477 NA 224 0 0 NA 1.9697411 -1.2653522 1.7749524 2.0956614 3.0956614 NA 0.2506947 0.5470143 NA 225 0 0 NA 1.1956806 -1.2653522 1.6486586 0.5956614 1.4528042 NA -0.9127394 -0.5765307 NA 226 0 0 NA 1.5053048 -1.2653522 1.5892352 1.8099471 2.1670899 NA 0.0924560 0.0924560 NA 227 0 0 NA 1.0408685 -1.2289775 1.2527630 1.5242328 1.7385185 NA 0.7346833 -0.3475886 NA 228 0 0 NA 1.3504927 -1.2653522 1.7404662 2.3813757 3.2385185 NA -1.2283037 -0.6148703 NA 229 0 0 NA 1.0408685 -1.2653522 0.3364722 1.3813757 1.8099471 NA 5.3551516 5.9795392 NA 230 0 0 NA 1.3504927 -0.7197319 1.2237754 2.2385185 2.6670899 NA 0.0662213 0.3233221 NA 231 0 0 NA 1.5053048 -1.2653522 0.1823216 2.0956614 2.6670899 NA 5.4939044 5.4939044 NA 232 0 0 NA 1.3504927 -1.2653522 1.4816045 1.1670899 2.1670899 NA -0.3778619 0.6154820 NA 233 0 0 NA 1.1956806 -1.1926028 1.6677068 0.6670899 1.5956614 NA -0.6177638 -0.4528312 NA 234 0 0 NA 1.1956806 -1.2653522 1.6486586 1.1670899 3.1670899 NA 0.2639911 0.2639911 NA 235 0 0 NA 1.6601169 -1.2653522 1.4350845 0.6670899 2.6670899 NA -0.1255841 0.1519215 NA 236 0 0 NA 1.6601169 -1.2653522 0.9932518 1.7385185 2.8099471 NA 3.7132435 3.7132435 NA 237 0 0 NA 1.8149290 -1.2653522 1.0647107 1.8099471 3.3099471 NA 1.0562070 2.2619210 NA Data needs to be formatted for use with a specific model fitting function, and this is accomplished with a call to an appropriate unmarkedFrame. unmarkedFrame’s are a special class of object used in this package for organising our data. These are built using R’s S4 reference class system instead of the more common S3 (like a linear model object lm). The benefit of this is a formal definition and validity checking to prevent accidentally breaking it, but the consequence is a slightly different syntax for examining it (covered later). In our case, to fit an occu() model we need to use the unmarkedFrameOccu(). This requires two data.frames and a list of data.frames: y: A data.frame of presence-absence records. Rows are sites, columns are repeat visits. siteCovs: A data.frame of the site-level covariates. These are things that don’t change between visits like elevation, annual rainfall, distance from roads, etc.. One column per covariate obsCovs: A list of data.frames for the observation-level covariates. Each covariate is its own data.frame with rows as sites and columns as repeat visits. These are things that can change between visits. Could be environmental conditions like daily temperature or cloud cover, or methodological variables like survey method (spotlighting, pitfall traps, ink cards etc.) or an observer ID. y &lt;- data[ ,2:4] siteCovs &lt;- data[ ,5:7] obsCovs &lt;- list(date = data[ ,8:10], ivel = data[ ,11:13]) umf &lt;- unmarkedFrameOccu(y = y, siteCovs = siteCovs, obsCovs = obsCovs) summary(umf) ## unmarkedFrame Object ## ## 237 sites ## Maximum number of observations per site: 3 ## Mean number of observations per site: 2.81 ## Sites with at least one detection: 79 ## ## Tabulation of y observations: ## 0 1 &lt;NA&gt; ## 483 182 46 ## ## Site-level covariates: ## elev forest ## Min. :-1.436125 Min. :-1.265352 ## 1st Qu.:-0.940726 1st Qu.:-0.974355 ## Median :-0.166666 Median :-0.064987 ## Mean : 0.007612 Mean : 0.000088 ## 3rd Qu.: 0.994425 3rd Qu.: 0.808005 ## Max. : 2.434177 Max. : 2.299367 ## length ## Min. :0.1823 ## 1st Qu.:1.4351 ## Median :1.6094 ## Mean :1.5924 ## 3rd Qu.:1.7750 ## Max. :2.2407 ## ## Observation-level covariates: ## date ivel ## Min. :-2.90434 Min. :-1.7533 ## 1st Qu.:-1.11862 1st Qu.:-0.6660 ## Median :-0.11862 Median :-0.1395 ## Mean :-0.00022 Mean : 0.0000 ## 3rd Qu.: 1.30995 3rd Qu.: 0.5493 ## Max. : 3.80995 Max. : 5.9795 ## NA&#39;s :42 NA&#39;s :46 2.5 Standardising Data If you haven’t done this before creating the unmarkedFrame object the syntax for subsetting changes slightly since an unmarkedFrame is an S4 class. The first $ subset is replaced with an @ umf@siteCovs$elev &lt;- scale(umf@siteCovs$elev) umf@siteCovs$forest &lt;- scale(umf@siteCovs$forest) umf@siteCovs$length &lt;- scale(umf@siteCovs$length) umf@obsCovs$date &lt;- scale(umf@obsCovs$date) umf@obsCovs$ivel &lt;- scale(umf@obsCovs$ivel) 2.6 Missing Data Considerations We have two types of data in these models: our observation data and our covariate data. These models account for missing data in the two groups differently. You are allowed to have missing records in your observation data. In practice this could result from varying numbers of repeat visits to a site or the loss of data. As long as a site has at least one observation it can be used in the model. Any site that has zero observations will be removed. You cannot have missing covariate data. If a site is missing the data for a site-level covariate it will be removed before model fitting. If a site is missing observation-level covariate data it will only be removed if it is missing for all observations, but the observation with missing data is removed. This is very important to consider when performing model selection so we will touch on this again later. 2.7 Fitting a Model Fitting a model with unmarked uses a similar syntax to fitting a linear model with the lm() function. The main difference is that the way a formula is defined varies. In the case of occu() it requires a double right-hand side formula for detection and occupancy covariates in that order. Essentially ~ detection formula ~ occupancy formula. fm &lt;- occu(formula = ~ 1 ~ 1, data = umf) fm ## ## Call: ## occu(formula = ~1 ~ 1, data = umf) ## ## Occupancy: ## Estimate SE z P(&gt;|z|) ## -0.665 0.139 -4.77 1.82e-06 ## ## Detection: ## Estimate SE z P(&gt;|z|) ## 1.32 0.174 7.61 2.82e-14 ## ## AIC: 528.987 unmarked estimates are on the link-scale (logit for occu() since it uses a logit-link), and the backTransform() function coverts them back to the original scale. You need to specify a type of state or det for occupancy or detection covariates. If you have fit a model with covariates then you need to specify values for them (i.e. what is the probability of occupancy when CovA = X and CovB = Y) backTransform(fm, type = &quot;state&quot;) ## Backtransformed linear combination(s) of Occupancy estimate(s) ## ## Estimate SE LinComb (Intercept) ## 0.34 0.0313 -0.665 1 ## ## Transformation: logistic backTransform(fm, type = &quot;det&quot;) ## Backtransformed linear combination(s) of Detection estimate(s) ## ## Estimate SE LinComb (Intercept) ## 0.79 0.0289 1.32 1 ## ## Transformation: logistic Alternatively, you can define an antilogit function: antilogit &lt;- function(x) { exp(x) / (1 + exp(x) ) } antilogit(-0.665) ## [1] 0.3396173 antilogit(1.32) ## [1] 0.7891817 Now, to add some covariates. First, assuming constant detection: fm1 &lt;- occu(formula = ~ 1 ~ forest + elev + length, data = umf) fm1 ## ## Call: ## occu(formula = ~1 ~ forest + elev + length, data = umf) ## ## Occupancy: ## Estimate SE z P(&gt;|z|) ## (Intercept) -1.05 0.195 -5.373 7.74e-08 ## forest 1.21 0.211 5.734 9.79e-09 ## elev 1.39 0.229 6.070 1.28e-09 ## length 0.14 0.179 0.784 4.33e-01 ## ## Detection: ## Estimate SE z P(&gt;|z|) ## 1.32 0.175 7.53 5.13e-14 ## ## AIC: 453.6822 And some more: fm2 &lt;- occu(formula = ~ date + ivel + forest ~ forest + elev + length, data = umf) fm2 ## ## Call: ## occu(formula = ~date + ivel + forest ~ forest + elev + length, ## data = umf) ## ## Occupancy: ## Estimate SE z P(&gt;|z|) ## (Intercept) -0.154 0.320 -0.482 6.30e-01 ## forest 0.339 0.305 1.110 2.67e-01 ## elev 2.328 0.416 5.591 2.26e-08 ## length 0.472 0.242 1.950 5.12e-02 ## ## Detection: ## Estimate SE z P(&gt;|z|) ## (Intercept) 0.2350 0.197 1.193 2.33e-01 ## date 0.0994 0.176 0.566 5.71e-01 ## ivel 0.5050 0.218 2.319 2.04e-02 ## forest 1.5522 0.221 7.019 2.24e-12 ## ## AIC: 433.6014 2.8 Model Selection 2.8.1 unmarked The is an in-built model selection method using fitList() and modSel(). You can name the models whatever you like, but the convention used here is common online (even if awkward to type out, especially for large numbers of covariates). fit &lt;- fitList(&#39;psi(.)p(.)&#39; = fm, &#39;psi(forest + elev + length)p(.)&#39; = fm1, &#39;psi(forest + elev + length)p(date + ivel + forest)&#39; = fm2) modSel(fit) ## nPars ## psi(forest + elev + length)p(date + ivel + forest) 8 ## psi(forest + elev + length)p(.) 5 ## psi(.)p(.) 2 ## AIC ## psi(forest + elev + length)p(date + ivel + forest) 433.60 ## psi(forest + elev + length)p(.) 453.68 ## psi(.)p(.) 528.99 ## delta ## psi(forest + elev + length)p(date + ivel + forest) 0.00 ## psi(forest + elev + length)p(.) 20.08 ## psi(.)p(.) 95.39 ## AICwt ## psi(forest + elev + length)p(date + ivel + forest) 1.0e+00 ## psi(forest + elev + length)p(.) 4.4e-05 ## psi(.)p(.) 1.9e-21 ## cumltvWt ## psi(forest + elev + length)p(date + ivel + forest) 1.00 ## psi(forest + elev + length)p(.) 1.00 ## psi(.)p(.) 1.00 2.8.2 MuMIn All unmarked models are compatible with the functions in the MuMIn package. For example, the dredge() and pdredge() functions perform dredge-based model selection that takes a ‘full’ or ‘global’ model and fits every possible combination of covariates and ranks them by some information criteria (AIC, BIC, etc.). full &lt;- occu(formula = ~ date + ivel + forest ~ forest + elev + length, data = umf) modelList &lt;- dredge(full, rank = &quot;AIC&quot;) ## Fixed terms are &quot;p(Int)&quot; and &quot;psi(Int)&quot; p(Int) psi(Int) p(date) p(forest) p(ivel) psi(elev) psi(forest) psi(length) df logLik AIC delta weight 15 0.2717989 0.1371948 NA 1.5844055 0.3213761 2.5016604 NA NA 5 -210.4061 430.8122 0.0000000 2.002183e-01 47 0.2270574 0.0809094 NA 1.5670653 0.5224874 2.4738438 NA 0.5137398 6 -209.7004 431.4009 0.5886862 1.491668e-01 16 0.2030971 0.1593233 0.1664722 1.6612138 0.2948331 2.4769948 NA NA 6 -209.9298 431.8596 1.0474156 1.185933e-01 63 0.2774926 -0.1777917 NA 1.5045006 0.5309495 2.3354733 0.3610538 0.4745035 7 -208.9608 431.9217 1.1095044 1.149682e-01 31 0.3012686 -0.0227557 NA 1.5541616 0.3184063 2.3982256 0.2026555 NA 6 -210.2111 432.4221 1.6099352 8.951808e-02 48 0.1788329 0.0982908 0.1319485 1.6263881 0.4746579 2.4564416 NA 0.4893203 7 -209.4140 432.8279 2.0157310 7.307912e-02 64 0.2350160 -0.1543441 0.0994379 1.5521741 0.5050283 2.3283553 0.3389721 0.4716440 8 -208.8007 433.6014 2.7892145 4.964020e-02 32 0.2306313 0.0403105 0.1517278 1.6329933 0.2928017 2.4085725 0.1462925 NA 7 -209.8344 433.6688 2.8566108 4.799529e-02 11 0.4466097 0.0915580 NA 1.4744212 NA 2.5637670 NA NA 4 -213.0908 434.1815 3.3693343 3.714173e-02 12 0.3324200 0.1241412 0.2308726 1.5993875 NA 2.5190296 NA NA 5 -212.1499 434.2997 3.4875171 3.501056e-02 27 0.4793926 -0.1087246 NA 1.4412648 NA 2.4230182 0.2761855 NA 5 -212.6709 435.3418 4.5295744 2.079310e-02 28 0.3685889 -0.0388545 0.2095462 1.5629547 NA 2.4202416 0.2118323 NA 6 -211.9236 435.8471 5.0349557 1.615017e-02 43 0.4525069 0.0889259 NA 1.4713281 NA 2.6091039 NA 0.1634937 5 -212.9256 435.8513 5.0391041 1.611670e-02 44 0.3385965 0.1197464 0.2282498 1.5945437 NA 2.5610702 NA 0.1531902 6 -212.0063 436.0126 5.2004500 1.486758e-02 59 0.4884183 -0.1255346 NA 1.4335076 NA 2.4685178 0.2959053 0.1894972 6 -212.4510 436.9020 6.0898420 9.530405e-03 60 0.3787542 -0.0597685 0.2051483 1.5517870 NA 2.4593252 0.2348551 0.1782155 7 -211.7321 437.4643 6.6520623 7.194933e-03 25 1.3157034 -1.0496155 NA NA NA 1.3475082 1.2191191 NA 4 -222.1556 452.3113 21.4990613 4.295778e-06 26 1.2844601 -1.0522406 0.1718313 NA NA 1.3354226 1.2242119 NA 5 -221.6936 453.3873 22.5751001 2.508320e-06 29 1.2445959 -1.0455354 NA NA 0.1848135 1.3455297 1.2218243 NA 5 -221.7782 453.5564 22.7441771 2.304987e-06 57 1.3157574 -1.0456432 NA NA NA 1.3892074 1.2105149 0.1401486 5 -221.8411 453.6822 22.8700249 2.164417e-06 58 1.2839466 -1.0482557 0.1728783 NA NA 1.3776263 1.2154396 0.1409657 6 -221.3706 454.7412 23.9290310 1.274620e-06 61 1.2377919 -1.0394241 NA NA 0.1965896 1.3918236 1.2121429 0.1521085 6 -221.4105 454.8210 24.0088570 1.224748e-06 30 1.2355377 -1.0486673 0.1406246 NA 0.1412025 1.3357680 1.2252015 NA 6 -221.4910 454.9820 24.1698020 1.130051e-06 62 1.2295468 -1.0429011 0.1385517 NA 0.1531505 1.3811610 1.2158195 0.1494977 7 -221.1312 456.2624 25.4501902 5.957515e-07 24 0.2291546 -0.3662072 0.3609984 1.2961532 0.7285032 NA 0.4142468 NA 6 -240.1228 492.2456 61.4333947 9.149799e-15 8 -0.0281270 -0.0475340 0.3844998 1.6052211 0.8287601 NA NA NA 5 -241.6817 493.3634 62.5512227 5.232127e-15 56 0.2664051 -0.4019090 0.3551751 1.2641240 0.6982385 NA 0.4515160 -0.0753654 7 -240.0298 494.0595 63.2473534 3.694158e-15 23 0.3842317 -0.4417472 NA 1.1495425 0.7932479 NA 0.4703237 NA 5 -242.2418 494.4836 63.6714068 2.988363e-15 40 -0.0341475 -0.0408255 0.3867366 1.6029884 0.8404482 NA NA 0.0485674 6 -241.6422 495.2844 64.4722034 2.002362e-15 55 0.4367117 -0.4864980 NA 1.1029636 0.7444892 NA 0.5199886 -0.1109263 6 -242.0311 496.0622 65.2500407 1.357180e-15 9 1.2440471 -0.7238769 NA NA NA 0.9071172 NA NA 3 -245.2019 496.4038 65.5916172 1.144103e-15 41 1.2392010 -0.7231367 NA NA NA 0.9940344 NA 0.2375585 4 -244.2499 496.4999 65.6876733 1.090452e-15 7 0.0817147 -0.0911363 NA 1.5057697 0.9449782 NA NA NA 4 -244.3417 496.6834 65.8711944 9.948454e-16 45 1.1346845 -0.7114837 NA NA 0.2496379 1.0088969 NA 0.2674159 5 -243.6462 497.2924 66.4802152 7.336829e-16 13 1.1696647 -0.7199777 NA NA 0.2033234 0.9001801 NA NA 4 -244.8389 497.6777 66.8655382 6.051132e-16 10 1.2380311 -0.7311123 0.0959000 NA NA 0.8852939 NA NA 4 -245.0790 498.1580 67.3458410 4.759268e-16 42 1.2326285 -0.7304323 0.0995715 NA NA 0.9709839 NA 0.2350621 5 -244.1140 498.2280 67.4157894 4.595693e-16 20 0.8339574 -0.6808379 0.4001558 0.7679528 NA NA 0.6833542 NA 5 -244.1575 498.3149 67.5027332 4.400190e-16 39 0.0785087 -0.0875094 NA 1.5047510 0.9518323 NA NA 0.0269958 5 -244.3292 498.6584 67.8461669 3.705918e-16 52 0.8389858 -0.6870414 0.3882027 0.7653299 NA NA 0.7103056 -0.1974959 6 -243.3853 498.7706 67.9584442 3.503605e-16 46 1.1380968 -0.7150126 0.0360656 NA 0.2357348 0.9982608 NA 0.2636282 6 -243.6305 499.2611 68.4488704 2.741703e-16 14 1.1728537 -0.7244779 0.0552900 NA 0.1846012 0.8879189 NA NA 5 -244.8010 499.6021 68.7899069 2.311880e-16 19 1.0712302 -0.7239623 NA 0.5284574 NA NA 0.7187187 NA 4 -246.3815 500.7631 69.9508739 1.293792e-16 51 1.0614332 -0.7253322 NA 0.5431030 NA NA 0.7427912 -0.2105270 5 -245.5000 500.9999 70.1877339 1.149294e-16 17 1.3384933 -0.7556707 NA NA NA NA 0.7644613 NA 3 -248.7650 503.5299 72.7177422 3.243745e-17 18 1.2778608 -0.7514852 0.2275269 NA NA NA 0.7692585 NA 4 -247.9271 503.8542 73.0419657 2.758306e-17 49 1.3369779 -0.7601678 NA NA NA NA 0.7921068 -0.1987465 4 -247.9441 503.8883 73.0760790 2.711657e-17 50 1.2780446 -0.7569066 0.2245248 NA NA NA 0.7972470 -0.1958420 5 -247.1296 504.2592 73.4470266 2.252602e-17 21 1.2426829 -0.7478339 NA NA 0.2229338 NA 0.7667187 NA 4 -248.2337 504.4674 73.6551805 2.029946e-17 53 1.2506170 -0.7540493 NA NA 0.2082875 NA 0.7933912 -0.1905279 5 -247.4794 504.9587 74.1465435 1.587766e-17 22 1.2103185 -0.7449714 0.1969607 NA 0.1730673 NA 0.7710529 NA 5 -247.6368 505.2737 74.4614681 1.356442e-17 54 1.2194474 -0.7518920 0.1961805 NA 0.1566134 NA 0.7977083 -0.1897549 6 -246.8906 505.7812 74.9690300 1.052412e-17 4 0.2541686 -0.2009794 0.5594061 1.5617529 NA NA NA NA 4 -249.8103 507.6206 76.8084088 4.195364e-18 36 0.2357155 -0.1708860 0.5396890 1.5978246 NA NA NA -0.2291602 5 -249.1665 508.3329 77.5207357 2.938257e-18 3 0.5617480 -0.3685693 NA 1.2354923 NA NA NA NA 3 -255.5722 517.1444 86.3322160 3.586751e-20 35 0.5167888 -0.3205897 NA 1.3043660 NA NA NA -0.2659546 4 -254.6159 517.2317 86.4195251 3.433541e-20 1 1.3249166 -0.6650338 NA NA NA NA NA NA 2 -262.4935 528.9870 98.1747779 9.618815e-23 2 1.2749717 -0.6639879 0.2096239 NA NA NA NA NA 3 -261.7925 529.5850 98.7728449 7.132684e-23 5 1.2234967 -0.6563222 NA NA 0.2367346 NA NA NA 3 -261.9381 529.8763 99.0640771 6.166130e-23 33 1.3236477 -0.6656290 NA NA NA NA NA -0.0878263 3 -262.2988 530.5975 99.7853108 4.299310e-23 6 1.2000292 -0.6562906 0.1768538 NA 0.1903936 NA NA NA 4 -261.4647 530.9294 100.1171656 3.641979e-23 34 1.2752897 -0.6649410 0.2066496 NA NA NA NA -0.0821538 4 -261.6203 531.2406 100.4284182 3.117093e-23 37 1.2280744 -0.6582929 NA NA 0.2282182 NA NA -0.0761202 4 -261.7907 531.5814 100.7691800 2.628780e-23 38 1.2051423 -0.6582980 0.1756097 NA 0.1817536 NA NA -0.0738349 5 -261.3252 532.6504 101.8381625 1.540379e-23 2.8.3 Missing Data As mentioned previously, missing data can have serious impacts on model selection. This is because information criterion like AIC are not comparable between models fit to different datasets. If you fit Model A with covariates 1 &amp; 2 with 100 sites, and Model B with covariates 1, 2, &amp; 3 with 90 sites (because covariate 3 is missing data) then you cannot compare AIC. This rule holds no matter how minuscule the difference is (e.g. 10,000 vs 9,999). To account for this you need to manually remove the data for all sites/observations that are missing data for any covariates that could potentially be included in your model. In the previous example, both Model A and Model B should be fit to the 90 sites not missing data for covariate 3. 2.9 Proportion of Area Occupied Imperfect detection can bias our occupancy estimates. So how do we calculate the actual proportion of area occupied by our target species while accounting for imperfect detection? 2.9.1 Assuming perfect detection If we naively assumed perfect detection the proportion of area occupied by a species is simply the proportion of occupied sites: number of sites where the species was observed divided by the total number of sites. siteValue &lt;- apply(X = data[,2:4], MARGIN = 1, FUN = &quot;max&quot;, na.rm = TRUE) mean(siteValue) ## [1] 0.3333333 2.9.2 Accounting for Imperfect Detection In reality we wouldn’t assume perfect detection, so we need to account for it otherwise we will end up with a biased underestimate of the proportion of area occupied. unmarked utilises empirical Bayes methods to estimate the posterior distributions of the random variables (here, latent occurrence state, \\(z_i\\)). \\[Pr(z_i = 1 | y_{ij}, \\psi_i, p_{ij})\\] AICbest &lt;- occu(formula = ~ forest + ivel ~ elev, data = umf) re &lt;- ranef(AICbest) EBUP &lt;- bup(re, stat=&quot;mean&quot;) CI &lt;- confint(re, level=0.9) rbind(PAO = c(Estimate = sum(EBUP), colSums(CI)) / 237) ## Estimate 5% 95% ## PAO 0.4858397 0.4219409 0.5949367 A difference in the proportion of area occupied of over 15%! Depending on how hard a species can be to detect with a given survey method this difference can potentially be much higher! 2.10 Prediction Lets load in a bigger dataset for this one. This is a dataset for ink card surveys for the giant gecko, Cyrtodactylus sadleiri, on Christmas Island. gg &lt;- read.csv(&quot;Data/GG.csv&quot;) umfGG &lt;- unmarkedFrameOccu(y = gg[ ,2:11], siteCovs = gg[ ,52:55], obsCovs = list(BHG = gg[ ,12:21], Rat = gg[ ,22:31], Height = gg[ ,32:41], Orientation = gg[ ,42:51])) Now lets fit a model with a larger amount of covariates. We can also alter some additional model parameters. method sets to optimisation method used by optim under the hood to estimate the maximum likelihood, control here sets the maximum number of iterations allowed for the model to converge (the default value is rather small so this is useful for more complex models), and engine gives you the choice to run the optimisation in native R code or fast C++. occuGG &lt;- occu(formula = ~ BHG + Rat + Height + Orientation + DistRoad.S + Slope.S + I(Slope.S^2) ~ YCASC + CHM.S + DistRoad.S, data = umfGG, method = &quot;BFGS&quot;, control = list(maxit = 10000), engine = &quot;C&quot;) ## Warning: Some observations have been discarded ## because corresponding covariates were missing. ## Warning: 100 sites have been discarded because of ## missing data. Now we load in the data we want to predict occupancy for. This dataset needs to have two columns for longitude and latitude values for each site/pixel, and a column for each covariate (each row is one site/pixel). Categorical variables need to have a single level specified per site. This is straight forward for something like vegetation class, but for methodological variables like survey method(ink cards, spotlighting, etc.) you need to select one a priori. ggPred &lt;- read.csv(&quot;Data/SiteValues.csv&quot;) And predict. occuPred &lt;- predict(occuGG, type = &quot;state&quot;, newdata = ggPred, na.rm = TRUE, inf.rm = TRUE) ## doing row 1000 of 27593 ## doing row 2000 of 27593 ## doing row 3000 of 27593 ## doing row 4000 of 27593 ## doing row 5000 of 27593 ## doing row 6000 of 27593 ## doing row 7000 of 27593 ## doing row 8000 of 27593 ## doing row 9000 of 27593 ## doing row 10000 of 27593 ## doing row 11000 of 27593 ## doing row 12000 of 27593 ## doing row 13000 of 27593 ## doing row 14000 of 27593 ## doing row 15000 of 27593 ## doing row 16000 of 27593 ## doing row 17000 of 27593 ## doing row 18000 of 27593 ## doing row 19000 of 27593 ## doing row 20000 of 27593 ## doing row 21000 of 27593 ## doing row 22000 of 27593 ## doing row 23000 of 27593 ## doing row 24000 of 27593 ## doing row 25000 of 27593 ## doing row 26000 of 27593 ## doing row 27000 of 27593 levelplot(Predicted ~ ggPred$x + ggPred$y, data = occuPred, col.regions = rev(terrain.colors(100)), at = seq(0,1,length.out=101)) 2.11 Model Evaluation A vital step in modelling is evaluating the accuracy of model predictions. Model evaluation usually involves testing how well our model can predict data not used in the model fitting process. Does our model predict high probability of occupancy for sites with observed presences in our hold-out data? Does it predict low probability of ocurrence for the sites with observed absences? The Area Under the Receiver Operating Curve (AUC) is a popular metric for this evaluation. The problem with this type of model evaluation for models accounting for imperfect detection is that we don’t know the true occupancy state of a site. Is the species actually absent from the site in our hold-out data, or did we just fail to detect it? As such this type of model evaluation is not appropriate for our modelling method. Instead we can use several goodness-of-fit tests to perform model evaluation. Here we use three tests: sum of squared errors, Pearson’s Chi-squared, and Freeman-Tukey Chi-squared. We create a new function called fitstats (where model.name should be replaced with your own), and then use it when fitting our model to bootsrapped samples of our data to assess model fit. Even though these are called goodness-of-fit tests they are looking for significant lack-of-fit evidence (which sounds too pessimistic), so a p-value of &lt;0.05 is actually a poorly fit model. A “good” model should return a value &gt;&gt; 0.05 for each test. Yet the issue of imperfect detection can still impact these tests. It is possible to fail one test but pass the others on the basis of poor prediction at a small subset of sites (even one). For example, an observed presence at a really low probability of detection site can dramatically inflate the test statistic. In these scenarios it is important to assess the input of each site to the test statistic to determine if the “lack-of-fit” can be disregarded as over-penalising the mismatch in a very low proportion of sites. fitstats &lt;- function(model.name, method = &quot;nonparboot&quot;) { observed &lt;- getY(model.name@data) expected &lt;- fitted(model.name) resids &lt;- residuals(model.name, method = &quot;nonparboot&quot;) sse &lt;- sum(resids^2, na.rm = TRUE) chisq &lt;- sum((observed - expected)^2 / expected, na.rm = TRUE) freeTuke &lt;- sum((sqrt(observed) - sqrt(expected))^2, na.rm = TRUE) out &lt;- c(SSE = sse, Chisq = chisq, freemanTukey = freeTuke) return(out) } pb &lt;- parboot(model.name, fitstats, nsim = 1000, report = TRUE, method = &quot;nonparboot&quot;) pb par(mfrow = c(3,1)) plot(pb, main = &quot;&quot;, xlab = c(&quot;SSE&quot;, &quot;Chisq&quot;, &quot;FT&quot;)) 2.12 Common Errors Error: Hessian is singular. Try providing starting values or using fewer covariates. (The bane of my Masters existence) This could come about for a variety of reasons. For models with a very low naive occupancy rate, especially in small datasets, you might need to specify starting values for the maximum likelihood estimation (see ?occu) You have complete separation in one or more covariates. This means the model doesn’t have the necessary data to calculate parameter estimates. For categorical variables this is commonly a factor level that has exclusively presence or absence observations (or potentially when the prevalence is near 0 or 1 in very big datasets), or there are factor levels in two or more categorical variables that never co-occur. Consider merging factor levels if possible! For continuous variables this is where the data is split into two (or more) groups at either end of a sampling range. For example, you are including elevation as a covariate but have presence records only at 0-20m, and absences only at 80-100m. The model then can’t estimate the slope of the relationship. You have somehow got a continuous variable set to factor You have too many covariates in the model for your data. There is no set rule for this and different people will give different answers. Every 10 sites allows one covariate, every 10 presences allows one covariate, every 10 allows one covariate in each formula, each level in a categorical variable is treated as a separate binary dummy variable and it does/does not count as a separate covariate for this count etc.. Something about factor levels and prediction. If you have a model with a categorical covariate with 5 factor levels, the data being predicted to must have 5 levels. Each site being predicted to can have the same level, but the data must be allowed to have other levels. This is an R error and not a statistical error. This is commonly caused by methodological observation-level covariates. For example, your data comes from three different survey methods (e.g. spotlighting, trapping, and drones), you fit the model and find out that spotlighting has the best probability of detecting your target species, and then predict to only spotlighting as a survey method. A really easy mistake to make! A dodgy fix: Set a random cell on the border of the area you are predicting to to the missing factor level A proper fix: Use the levels() function to set additional levels to your prediction data Your fitted model has unrealistic parameter estimates. occu() is on the logit-scale, so anything outside [-5, 5] is when you need to start checking. When this is back transformed to the probability scale it is roughly [0, 1]. There is leeway if you are considering polynomial terms. If you start getting parameter estimates of +30, -90, or +462.10 (David’s high score) then you definitely have an issue! This is equally likely to happen to categorical or continuous data. This could be one of two issues: Your model has not converged on the maximum likelihood. Use the control argument when fitting the model to increase the number of iterations in the optimisation process. The default is rather small at 100 or 500 depending on your optimisation method. Setting it high (i.e. 10,000) is fine, as it is a maximum, and the model will stop if it converges earlier. Your model has converged on a local maximum. Likelihoods can have multiple peaks, but only one maximum, and your model is stuck on the wrong one. To fix this use the starts argument to provide starting values for parameters to start the optimisation in a different area. Model selection with dredge() is too much for my computer to handle. + See David (for Spartan) or Casey/Nick (for Boab) 2.13 Additional resources Overview of unmarked vignette by Ian Fiske and Richard Chandler. The official intro guide that I copied some of the early examples from. unmarked: An R Package for Fitting Hierarchical Models of Wildlife Occurrence and Abundance. The paper about the package The unmarked website. The unmarked google group/forum. This is frequented by most of the package creators/contributors and other occupancy modellers. More often than not the answer to your problems has already been solved here. "],
["version-control-with-rstudio.html", "3 Version control with RStudio 3.1 Introduction 3.2 Requirements 3.3 RStudio options 3.4 RStudio Projects 3.5 RStudio’s Git Interface", " 3 Version control with RStudio 3.1 Introduction Version control is a really powerful tool in a researcher’s toolkit, but also one of the most intimidating. Using git directly through a terminal interface (inside or outside of RStudio) requires learning a new language (git) which can be really off-putting, but newer versions of RStudio have an in-built git interface to make this much more user-friendly. This guide will serve as a brief introduction to setting up version control with RStudio for new or existing projects without needing to use the terminal. 3.2 Requirements The minimum technical requirements: RStudio v1.1.383 or later Mac users: Install git Windows users: Install git and Git BASH Windows doesn’t have a terminal by default. Git BASH serves as a terminal emulator. 3.3 RStudio options By default, RStudio does not assume a user has a git installation. It also does not always automatically register that one has been installed so the connection must be made. Open RStudio’s Global Options menu by going to Tools &gt; Global Options. Under the Git/SVN tab you need to tick the Enable version control interface for RStudio projects box, and set the file path to your installed git executable. *** 3.4 RStudio Projects Version control in RStudio require you to be using Projects. On top of version control, Projects improve the RStudio experience in other ways and you should be using them anyway… To create a Project you can either go to File &gt; New Project: *** Or use the project menu in the top-right corner: *** The New Project menu has three options: New Directory, Existing Directory, and Version Control. Each of these follow a different process. *** 3.4.1 New Directory The new directory option is for when you’re starting from scratch. First, select New Project from the Project Type menu. *** Now give your project a name, set where you want it to be a subdirectory, and tick the Create a git repository box. *** This creates the project, creates a directory for it, and does all of the leg work setting up a local git repository for the project. 3.4.2 Existing Directory The existing directory option is for adding version control to an existing directory. The first thing to do is select the directory you want to turn into a project. *** You can’t set up a project in an existing directory and set up version control at the same time. This means that we need to manually set up version control after creating the project. Got to Tools &gt; Version Control &gt; Project Setup…. *** Now set the Version control system to Git. *** And now you can initialise a git repository for the project. *** 3.4.3 Create a local version of an online repository The final Project option, Version Control, is to create a project on your local machine that is a clone of an online git repository. The two most common uses for this option are 1) collaboration, and 2) you’ve created the repository on GitHub first. The first thing you need to do is select which version control system you are using (Git in our case). *** Now you need to provide the URL for the repository you want to clone, set the name of the directory for your local version, and select where it will be a subdirectory of. The test_git_repo GitHub repository is one I set up for this guide, so feel free to clone it yourself (just change your directory path!). *** 3.5 RStudio’s Git Interface RStudio provides a Git interface that is a) only visible after you set up a version controlled project, and most importantly b) less intimidating that the terminal. Almost everything can now be done by point-and-click. A Git menu shows up in the toolbar at the top of the screen, but it is easier to keep everything in the Git pane. *** The first thing you will notice is a list of files in your directory and some coloured squares. The most important thing to know is that these are not necessarily all of your files, but just those that have changed since the last Git “save state” (more on that to come). This is where you stage your files to be committed (saved) later. The Status column gives you coloured indicators about what has happened to the file since the last commit: Blue: Modified (M) files. These files have changed since the alst commit. Yellow: Untracked (?) files. Git has not yet been told you track changes in these files. These are usually new files. Green: Added (A) files. These are files that have been created since the last commit. Most Yellow files turn Green when they are staged (i.e. Git now knows to track their changes) Red: Deleted (D) files. These files have been deleted since the last commit. The Status column itself has two columns of these coloured icons. The left column is for staged files and the right column is for unstaged files. Untracked (yellow) files show up in both columns. 3.5.1 Staging Files You might not always want to commit to the changes you’ve made in all of your files. This is what the staging area is for. You stage the files you want to commit by clicking the appropriate tick box. Thse files are now ready to be committed. *** 3.5.2 Committing You commit files to generate a “save state” or “backup point”. After staging your files you can click the Commit button in the Git pane to open the a new window and proceed. This new windows has three panes: Staging Area: The same as seen in the Git pane Commit Message: You can add a commit message to each of your commits by adding text here. There are no set rules for what to put in a commit message, but something useful helps for tracking things down later. E.g. “Added file X”, “New version of files Y &amp; Z. Fixed model fitting bug”. Differences: This pane shows you the differences in a file (whichever one is selected in the Staging Area pane) between the last commit and this pending one. Lines in green have been added, and lines in red removed. Changed lines will show up with both a green and red line. *** When you have staged everything you want to commit and suppied a commit message you can then click Commit in the Commit Message pane. This will pop up a terminal window but you can ignore it if you wish. It will provide a summary of the commit, or show an error is someting went wrong. In this case, we changed 5 files which involved inserting a total of 23 new lines and creating four new files. *** If you are running with a local and online version of the repository then your Git pane will now show a message detailing how out of synch they are. *** 3.5.3 Push/Pull If you are just using Git locally then you can ignore this section. If you are working with online repositories you will need to learn how to push and pull. The difference between the two is that you push your local changes to the online repository, and you pull changes on the online repository to your local version. You will only need pull if you are collaborating with other people or manually change the online files on GitHub. If we are ahead of the online repository because we have committed something new then a notification pops up in the Git pane. *** If we want to send our changes to the online repository then we need to be linked together. If you have created your project by cloning an online repository then this link is already in place, but if you created only a local repository using a new or existing repository then the link need to be created manually. So far this guide has done everything within RStudio’s Git interface, but setting up these links between local and remote (i.e. GitHub) repositories can’t be done with buttons. This means we need to use the terminal! You only need to run one command in the terminal and then you can run back to the safety of RStudio. The command is as follows, and you just replace and with the account and repository ID of the GitHub repository: git remote add origin https://github.com/&lt;Account&gt;/&lt;Repository&gt;.git For example: git remote add origin https://github.com/Doi90/test_git_repo.git Now that the link is established you can push your changes to the online repository by cliking the push button (green up arrow) in the Git pane. Thsi will open a new window showing some Git messages you can ignore. *** If you need to pull changes then you just use the pull button (blue down arrow). "],
["introduction-to-spartan.html", "4 Introduction to Spartan 4.1 What is Spartan? 4.2 Accessing Spartan 4.3 Using Spartan 4.4 Additional information and links", " 4 Introduction to Spartan (#label:IntroToSpartan) 4.1 What is Spartan? Spartan is the University of Melbourne’s high performance computing system (HPC). It is designed to suit the needs of researchers whose desktop/laptop is not up to the particular task. Models running slow, datasets are too big, not enough cores, application licensing issues, etc. Spartan consists of: a management node for system administrators, two log in nodes for users to connect to the system and submit jobs, ‘bare metal’ compute nodes, and GPUGPU compute nodes. 4.2 Accessing Spartan 4.2.1 Getting an Account To gain access to Spartan you need to create an account. Via Karaage at link Need to create a project Need a project leader (you), and you can invite collaborators for joint projects Need a project title/description to demonstrate research goals and/or research support Takes ~2 days for approval (as of 2017) 4.2.2 Required Programs To connect to Spartan you will need a Secure Shell (SSH) and a Secure File Transfer Protocol (SFTP) client. The SSH client is your interface with Spartan while the SFTP client is used to transfer files from your local computer to your Spartan home directory. 4.2.2.1 Windows Users Use PuTTY as your SSH client. This is an easy set-up with the following five steps: Set your host name: spartan.hpc.unimelb.edu.au Set your port number: leave as default (whereas Boab users need a defined port) Set your connection type: SSH Name your session to make it easy for future log-ins: Whatever you like i.e. Spartan Save your session details Your first log-in to Spartan via the SSH client creates your home directory on Spartan so it is important to do that before setting up your SFTP client. Use WinSCP as your SFTP client. This is an easy process with the following six steps: Set your file protocol: SFTP Set your host name: spartan.hpc.unimelb.edu.au Set your port number: leave as default (whereas Boab users need a defined port) Enter your username Enter your password (note, this will show more characters than you entered when saved) Log-in Inside a WinSCP session you will have dual file explorer windows: your local machine (left) and Spartan (right). If you have not made your initial log-in to Spartan via your SSH client you will have a blank white screen in the right-hand window. Transferring files between the two directories is achieved with a simple drag-and-drop interface. Your two clients are now set up and everything is ready to access Spartan. After set-up you don’t need to deal directly with PuTTY as a separate program anymore as there is a button in the WinSCP toolbar to open a session. 4.2.2.2 Mac/Linux Users Unlike for Windows, OSX and (most) linux operating systems already have SSH installed and have a fully functional terminal built in. So to SSH into the Spartan log-in node, you just need to open up a terminal (the Terminal application on a mac), and issue the command: ssh myusername@spartan.hpc.unimelb.edu.au Replacing myusername with your username. Then enter your password (no characters will show, that’s normal) and hit return. That should look something like this: Same as for Windows, your first log-in to Spartan via the SSH client creates your home directory on Spartan so it is important to do that before setting up your SFTP client. SFTP is also installed on most OSX and linux versions, so you could transfer files to Spartan directly from the terminal (do man sftp in the terminal if you’re interested in that). However it’s normally easier to use a SFTP client with a graphical user interface. One nice option for OSX (that also works on Windows) is Cyberduck. Once installed, you can add a new connection to Spartan with the following steps: Clicking on the + in the lower-left corner Set the connection type to SFTP Give the connection a name Set the server name: spartan.hpc.unimelb.edu.au Set the port number to 22 Enter your username You can then close the connection details box, and double-click on the new connection to initiate it. This will pop up a file explorer like the image below, listing the files in your working directory on Spartan. You can drag and drop files between there and your computer. 4.2.3 Log in to Spartan Now that you have everything in place to access Spartan, open an SSH session (in PuTTY or Terminal). As before, this wont display characters as you type your password. The text that loads at the beginning gives you the usual university IT policy spiel, a couple of getting started prompts, a warning about the log-in node, and the obligatory 300 reference. It also has a Daily Weather Report updated each morning to show how busy Spartan is. As it is only updated once a day though it is only a rough indication and can vary wildly if lots of jobs start or finish. 4.2.4 Help Typing man Spartan loads the university’s Spartan FAQ. Rather than loading the entire document it loads it a screen at a time and you have to navigate by keyboard commands. For now, you will only need these: h: help, shows you the keyboard shortcuts q: quit the document and go back to the Spartan interface ^ is shorthand for the control/command button, so ^V is Ctrl+V / Cmd+V Enter/Return will let you advance by one line ^Y will let you go back by one line ^V will let you advance by one window ^B will let you go back by one window If you want help with a particular function in Spartan you can type man &lt;function name&gt; (without &lt; &gt;). This works like ? in R. 4.3 Using Spartan The log-in nodes on Spartan are a shared resource between all users and is only allocated the memory to handle log-ins and job submission. Do not run jobs in the log-in node or the admins will get upset and kill the job. There are two ways to get out of the log-in node and into dedicated compute nodes: sinteractive and sbatch. 4.3.1 sinteractive The sinteractive command will give you access to a compute node (as soon as available) where you can work interactively with your job. While you can submit an entire job in this method, that is better saved for sbatch while sinteractive is used for testing/debugging. There are default settings for sinteractive which should be enough for most uses, but they can be modified if needed like so: sinteractive --time=00:10:00 --nodes=1 --ntasks=1 --cpus-per-task=2 This will give you access to one node to perform one task with two processors for ten minutes (the default values). Lets open a default node and explore some basic commands. Type sinteractive. This submits a request for a default compute node (1), and you have to wait for the resource to become available (2) before you can continue. The ls command will show you everything in your current directory. Folders show up in blue. The cd command will let you change your current directory. As Spartan is Linux based it uses / not \\ for directories (unlike Windows). The \\ character is used to say that the preceding term is a special character. Lets change into a sub-folder and see what is inside. Spartan lets you pre-fill filepaths/names using the tab key like R but slightly differently. It will pre-fill everything until a choice needs to be made and then pressing the tab key twice will list some options. Once only one exist then it will finish the autocomplete. The pwd command prints your current working directory. Lets run a sequence of pwd, cd, and ls to see them in action. The programs available on Spartan as referred to as modules, and you can see a complete list using module avail. A massive list of all modules isn’t that useful! We can return more targetted lists either by adding a keyword to module avail or by using module spider. module avail searches for the keyword in the “full” module name so something like module avail r will return every module with the letter r in it so use something more specific like module avail r/3.6 instead to return all versions of the R module that are version 3.6.*. module spider is a fuzzy match to the “actual” name of the module so module spider r will return all modules that are the closest match to the keyword, and a list of other module “actual” names that might also match. There are two steps to loading a particular module. First, the module load &lt;module&gt; command to load the module into the compute node’s environment, and then &lt;module name&gt; to start the program. If you don’t specify the specific module version in module load &lt;module&gt; then it will load whichever version is set as the default (typically the newest one). For a variety of reasons it is best to always load a specific version! To load R for example: 4.3.2 sbatch The sbatch command is used for direct job submission to Spartan using the batch system called SLURM (Simple Linux Utility for Resource Management). This system tracks resources throughout the cluster and manages a queue of jobs. When resources are available the job scheduler will direct your job to a compute node to run. To submit a job using the sbatch command you need to write a slurm script that sets up your instance (amount of memory, number of processors, etc) and runs your model. Note for Windows users: write these in Notepad++ as Windows and Linux use different line break notation (/r/n vs /n) and standard text files written on Windows won’t run on Spartan. A basic slurm file for R might look like this (from Spartan’s own examples): #!/bin/bash # To give your job a name, replace &quot;MyJob&quot; with an appropriate name #SBATCH --job-name=Rsample #SBATCH -p physical # For R need to run on single CPU #SBATCH --ntasks=1 # set your minimum acceptable walltime=hours:minutes:seconds #SBATCH -t 0:15:00 # Specify your email address to be notified of progress. #SBATCH --mail-user=youreamiladdress@unimelb.edu #SBATCH --mail-type=ALL # Load the environment variables for R module load r/3.6.0 # The command to actually run the job R --vanilla &lt; tutorial.R slurm scripts can be as simple or as complex as required depending on the job you want to run. slurm scripts always need to begin with #!/bin/bash on the first line. Why? It tells the shell what kind of interpretor to run (in this case bash). Like R, anything following a # in bash/slurm is interpreted as a comment. However, #SBATCH is recognised as special syntax to control job parameters. You can mix commented lines, #SBATCH lines, and empty lines at the start of your script, but once the first “actual command” is run all subsequent #SBATCH lines are treated as comments only. Some useful #SBATCH commands to consider are: #SBATCH --job-name=&lt;name&gt;: Lets you give your job a name alongside its job id. Useful if you’re running lots of jobs at once. By default it sets it to your file name, or replace with your name of choice like this: #SBATCH --job-name=MyJob #SBATCH -p &lt;partition&gt;: This is where you select which partition on Spartan your job will run. By default you only have acces to the physical partition which can run single or multi-node jobs of up to 72CPUS and 1500GB of memory (although getting access to that amount of resources in a single job will take time). There are also other specialty partitions with larger requirements or GPUs as well. If you have access to a dedicated partition then use your partition name. In most cases you will use the following: #SBATCH -p physical #SBATCH --time=&lt;&gt;: As Spartan is a communal resource and jobs are allocated a share from a queue you need to specify a maximum amount of walltime that you want your instance to remain open. As you aren’t likely to know how long your model will need to run for (outside of a rough guess) it is recommended that you give a conservative estimate. If necessary you can contact Spartan support and get your time extended. There are multiple formats for entering a time value depending on the scale of your job: “minutes”, “minutes:seconds”, “hours:minutes:seconds”, “days-hours”, “days-hours:minutes” and “days-hours:minutes:seconds”. Many SLURM documentations will list setting --time=0 as a way to set an indefinite walltime but this will automatically be rejected by Spartan. For example, a one hour instance could be called with the following: #SBATCH --time=01:00:00 # hours:minutes:seconds format #SBATCH --nodes=&lt;number&gt;: You need to request an allocation of compute nodes. Most jobs will be single node jobs, but there is the ability to run jobs over multiple nodes that talk to each other. Multi-node jobs will require using OpenMPI to allow the different nodes to communicate. To call a single node use the following: #SBATCH --nodes=1 #SBATCH --ntasks=&lt;number&gt;: This line informs the SLURM controller that job steps within the allocation will launch a maximum of number tasks and to provide sufficient resources. Most jobs will need to a perform a single task which can be set as follows: #SBATCH --ntasks=1 #SBATCH --cpus-per-task=&lt;number&gt;: This informs the SLURM controller that each task will need number of processors per task. To allocate four processors (like on a quad-core desktop without multi-threading) you would set: #SBATCH --cpus-per-task=4 #SBATCH --mem=&lt;number&gt;: This is where you nominate the maximum amount of memory required per node (in megabytes). Physical nodes can have up to 1500GB. To request 10GB of memory (remembering that 1GB = 1024MB) you would use: #SBATCH --mem=10240 #SBATCH --mail: The final group of useful sbatch commands that you would regularly use sets up email notifications of various events during job submission/running. There are two separate commands here: --mail-user=&lt;&gt; to set who gets notified, and --mail-type=&lt;&gt; to chooses what you get notified about. Some useful mail options include: BEGIN: the model is out of the queue and started to run (includes start time and time in queue) END: the model has completed (includes run-time) FAIL: the model has failed (includes run-time) REQUEUE: the model has been re-queued (i.e. someone with priority has had you booted off) ALL: all of the above plus STAGE_OUT TIME_LIMIT_50: reached 50% of your allocated time TIME_LIMIT_80: reached 80% of your allocated time TIME_LIMIT_90: reached 90% of your allocated time You can string multiple notifications types together by separating them with commas, so you could do something like the following: #SBATCH --mail-user=&lt;your email here&gt; #SBATCH --mail-type=ALL,TIME_LIMIT_90 After setting up your instance you then need to supply the instructions for what you want your job to do. This will often just be a change of directory, loading the module (program) you need, and calling the script you want to run. TO run an R script you can either use R --vanilla &lt; file.R or Rscript --vanilla file.R. The former echos your input statements in your output file while the second option (my preferred method) does not. Not all modules have two formats available (so check man &lt;modulename&gt;), but they all allow the former (from memory). You can see the different options available for calling an R script using man R (after loading the module into the environment). Some useful options include: --save: Save workspace at the end of the session --no-save: Don’t save workspace at the end of the session --vanilla: A wrapper around --no-save and a few other commands useful for starting R as a blank slate (no loading pre-saved objects, etc) Now we can put all of this together to create our SLURM file: #!/bin/bash #SBATCH --job-name=Coding_Club_Example #SBATCH -p physical #SBATCH --time=1:00:00 #SBATCH --nodes=1 #SBATCH --ntasks=1 #SBATCH --cpus-per-task=1 #SBATCH --mem=10240 #SBATCH --mail-user=&quot;davidpw@student.unimelb.edu.au&quot; #SBATCH --mail-type=ALL module load r/3.6.0 Rscript --vanilla tutorial.R Assuming this Slurm file is named “MyFile.slurm”, you can submit your job to the queue from the log-in node using the following command sbatch MyFile.slurm 4.3.3 Useful Auxiliary Commands Now that we know how to submit jobs to Spartan either through sinteractive or sbatch, lets look at some other useful commands in Spartan. Spartan uses a Unix-based operating system so a lot of Unix xommands work here. These commands range from help functions, in built text-editors, checking job status, or job control. Some of these may have been used earlier in this document but are important enough for another mention: man &lt;function name&gt;: This is Spartan’s help function. For example, man Spartan will call the Spartan FAQ, man sbatch will call the help file for the sbatch command, and man R will call the help file for running R in Spartan. pwd: Print working directory ls: List all files/directories in current directory cd &lt;file path&gt;: Change current directory. cd sets you to your home directory, cd - goes to previous directory, cd .. goes back one step towards root rm &lt;filename&gt;: Delete a file mkdir &lt;folder name&gt;: Create a new folder in current directory rmdir &lt;folder name&gt;: Delete a folder (must be empty) nano &lt;filename&gt;: This is Spartan’s in-built text editor. This can be used for on the fly alterations to a file (i.e. increase memory limit), but I use it most often for reading the slurm output files for checking why a model run failed. head &lt;filename&gt; and tail &lt;filename&gt;: Print the first/last ten lines of a file history: List commands you’ve used previously. You can navigate previous commands in your current session using the up/down keys like in R, but this lists previous commands over previous sessions as well echo &lt;text&gt;: Prints text squeue: This command is used for checking on job status. squeue: This base command will show all jobs in the queue for all users squeue -u &lt;username&gt;: This will show all jobs for a particular user squeue -u &lt;username&gt; -t RUNNING: This will show all running jobs for a particular user (can also use PENDING) showq: This command displays the actual queue and splits it into ACTIVE, WAITING, and BLOCKED jobs. ACTIVE jobs are those currently running. WAITING jobs are those “next in line” pending resource availability, and no user can have more than five jobs here. BLOCKED jobs are those in the queue but not in the “priority” WAITING area. showq: This base command will show all jobs for all users in ACTIVE and WAITING but only a user’s BLOCKED jobs showq -u &lt;username&gt;: This will show all jobs for a particular user showq -p &lt;partition&gt;: This will show all jobs running on a given partition, but more importantly provides more up to date information regarding the usage/availability of that partition than the Daily Weather Report scancel: This command is used for cancelling jobs in the queue. For example: scancel -u &lt;username&gt;: cancels all jobs for that username scancel -u &lt;jobid&gt;: cancels the job called by scancel --name &lt;JobName&gt;: cancels jobs by name scancel -t PENDING -u &lt;username&gt;: This cancels all pending jobs for a particular user sstat: This command is used to show memory information of running jobs: For non-admin users there is no need to specify a username as you are restricted to your own jobs only by default You can use the --format option to specify the details you want to see. You can list multiple comma-separated fields to view more details sstat --helpformat will list the available fields to view Browsing man sstat will let you see descriptions for each field For example: sstat -j &lt;jobid&gt; --format JobID,NTasks,Nodelist,MaxRSS,MaxVMSize,AveRSS,AveVMSize sacct: This command is used to show memory information of completed jobs: For non-admin users there is no need to specify a username as you are restricted to your own jobs only by default You can use the --format option to specify the details you want to see. You can list multiple comma-separated fields to view more details sacct --helpformat will list the available fields to view (many more options that sstat) Browsing man sacct will let you see descriptions for each field For example: sacct -j &lt;jobid&gt; --format JobID,jobname,NTasks,nodelist,MaxRSS,MaxVMSize,AveRSS,AveVMSize,ExitCode,CPUTime 4.4 Additional information and links There are simple example slurm files for the most common modules at /usr/local/common/ (including R, MATLAB, and Python) Online Spartan FAQ. Same as using man spartan Online SLURM FAQ Online SLURM script generator. Simple jobs only though! srun and salloc functions are used for parallel jobs Support for multi-core/multi-threaded architecture Running R in parallel using the rslurm package "],
["installing-r-packages-on-spartan.html", "5 Installing R packages on Spartan 5.1 Introduction 5.2 Set-up a user-specific library 5.3 Install R packages into your Spartan user-specific library", " 5 Installing R packages on Spartan 5.1 Introduction One of R’s strengths is the abundance of packages freely available to users (over 10,000 as of 27/01/2017). As such, everyone ultimately has their own suite of select packages that they use, and on a personal computer these are easily managed and stored within the user’s library. On a massive communal resource like The University of Melbourne’s Spartan high-performance computing (HPC) service things are not so simple. R is available as a module on Spartan that any user can load, however, its default package library is read-only for non-admin users. While the default module library is loaded with a suite of commonly used packages it is not exhaustive and many users will require additional packages. The system administrators can add additional packages (or update them to more recent versions) upon request, but the job gets added to a queue and could take days to be completed. Instead it is easier (for both users and administrators) if the users are able to install additional packages themselves. R has the ability to connect to multiple libraries and search them all when trying to load packages. This is a fairly straight-forward process on a personal computer, but more complex to set-up on HPC architecture where a user’s jobs could be run any on any of hundreds of different compute nodes with different environments. This guide will show you how to a) set-up a secondary, user-specific library on Spartan linked to your home directory, and b) install all of the packages already on your personal computer that aren’t in Spartan’s R library into this new user-specific library. This guide will make use of some specialised unix commands and SLURM scripts but does not require any previous knowledge of them from the user (the steps can be mostly followed by copy/pasting commands). You can find more information on basic Spartan usage in another lodestar guide [here][IntroToSpartan]. 5.2 Set-up a user-specific library 5.2.1 Create the library A package library is just a folder/directory on a computer where R stores its installed packages. You can see the filepaths to the library/libraries connected to your R session using the .libPaths() command. .libPaths() ## [1] &quot;C:/Users/wilko/Documents/R/win-library/3.6&quot; ## [2] &quot;C:/Program Files/R/R-3.6.3/library&quot; In this case, you can see that my personal computer recognises two libraries. To create a user-specific library on Spartan we just need to create a folder for it. This can be done interactively through your SFTP client (like WinSCP for Windows users, or CyberDuck for Mac users) using the new folder button, or using the mkdir command in Spartan’s command line. For example: mkdir -p ~/R/lib This creates the lib directory inside the R directory in your home directory (refered to by ~). The rest of this guide assumes you have created this same directory, but if you select something else you can just modify the commands/files that follow. 5.2.2 Set Spartan to connect to this new library We have now created a user-specific library, but unless we tell R on Spartan to look here we still wont be able to install our own packages. There are two approaches to do this: one on a per-job basis (my preference) or fix it at the profile level. 5.2.2.1 Setting the library path inside your R script R has a .libPaths() function for viewing and setting your library paths. The easiest way to do this is to add a couple of lines at the top of your R script. ## Set the library path .libPaths(&quot;Your library path here&quot;) ## If you need to install packages then save the desired ## path as a variable lib = .libPaths()[1] This will set your personal library as the default option before Spartan’s library path. Saving the library path as a variable will make installing packages easier, but it isn’t required in a script that is just loading packages with library(). This is my preferred method as you can easily modify the library path on a per job basis if you have multiple personal libraries. This could be because you have different R version libraries (e.g. 3.4 and 3.5) required for different projects or if you have different libraries built with different compilers (e.g. GCC or intel) because of underlying dependencies. 5.2.2.2 Setting the library path in your Bash Profile Each time you open an sinteractive session or submit a job via sbatch R will open in a new environment and will only register Spartan’s library unless we tell it otherwise. While we can tell R where to look after we open it by manually setting the .libPaths(), it will immediately forget each time it gets shut down. Instead we can modify our .bash_profile file once and it will automatically set R’s library paths each time it opens up which is more convenient (but risks problems down the line). .bash_profile is a hidden file in your home directory, but you can print its contents to the screen with this command: cat .bash_profile # .bash_profile # Get the aliases and functions if [ -f ~/.bashrc ]; then . ~/.bashrc fi # User specific environment and startup programs PATH=$PATH:$HOME/.local/bin:$HOME/bin export PATH This is the basic .bash_profile file found in every user’s home directory. We need to edit this to add a command telling R where our user-specific library is. To do this we can edit the file in the console with this command: nano .bash_profile We need to add in these lines of code: # Set the library path for R to include Spartan AND local directory # Allows user to install packages to their home directory export R_LIBS_USER=&quot;Personal library path here&quot;:&quot;/usr/local/easybuild/software/R/3.4.0-GCC-4.9.2/lib64/R/library&quot; So that the .bash_profile file looks like this: # .bash_profile # Get the aliases and functions if [ -f ~/.bashrc ]; then . ~/.bashrc fi # User specific environment and startup programs PATH=$PATH:$HOME/.local/bin:$HOME/bin export PATH # Set the library path for R to include Spartan AND local directory # Allows user to install packages to their home directory export R_LIBS_USER=&quot;Personal library path here&quot;:&quot;/usr/local/easybuild/software/R/3.4.0-GCC-4.9.2/lib64/R/library&quot; And follow the prompts to exit and save (^X means Control + X or Command + X). Now each time we open a new environment on Spartan we export the R_LIBS_USER variable (which sets R’s library paths) into the new environment automatically. We can supply any number of library paths to this variable as long as they are each within \" \" and separated from each other by :. In this example we set two library paths: our personal library path and then the default Spartan library (for a specifc R version module). Changes to the .bash_profile file don’t take effect until our next log-in to Spartan, so if we log-out and back in again our changes come into effect and we are now free to install and load packages to/from our user-specific library. The .bash_profile method is perfectly fine as long as you only need to have a single personal library. You will need to update it anytime you switch to a new R version module. It is important to note that the .bash_profile method can cause you problems if the R module version you load is different from the library path in your .bash_profile. This is because the .bash_profile library path (say, 3.4) will get loaded even if incompatible with the loaded module (say, 3.5). This will cause problems even if you define a library path manually in the R session. 5.3 Install R packages into your Spartan user-specific library Just like in R on your personal computer you will install packages on Spartan using the install.packages() function. The only difference is that you will need to specify two additional arguments: lib and repo. We need to specify lib to tell R where our personal library path is and repo to specify a CRAN mirror for the installation. Once you fire up an sinteractive session and get into R you need to use the following commands: ## Set the library path .libPaths(&quot;YOUR PATH HERE&quot;) ## Save personal library path as a variable lib = .libPaths()[1] ## Install a package install.packages(&quot;PACKAGE NAME&quot;, lib = lib, repos = &quot;https://cran.ms.unimelb.edu.au/&quot;) NB: This can take longer than on your personal computer AND spit out a lot more gibberish looking messages to screen. NB: You could automate this process by saving a .rds file on your local computer that stores the names of all of your installed packages (extracted from the installed.packages() output), uploading it to Spartan, reading the RDS file into the session and then running install.packages(\"package_names_vector\"). 5.3.1 Installing packages from GitHub By default a Spartan session will not have access to the world outside of Spartan so you can’t install packages from GitHub. If you need to install packages from GitHub (using devtools, for example) then you need to connect your Spartan session to the internet before opening R. This just requires running three lines of code before the R session opens (either before the Rscript command in an sbatch file or R in an sinteractive session). sinteractive ## Set up connection to outside world export http_proxy=http://wwwproxy.unimelb.edu.au:8000 export https_proxy=$http_proxy export ftp_proxy=$http_proxy ## Open R session module load r/3.6.0 R library(devtools) install_github(&quot;AUTHOR/REPO&quot;) "],
["r-file-directory-interface-commands.html", "6 R File &amp; Directory Interface Commands 6.1 Introduction 6.2 Information 6.3 Creation 6.4 Modification 6.5 Deletion 6.6 Miscellaneous 6.7 Closing Thoughts", " 6 R File &amp; Directory Interface Commands 6.1 Introduction Recently I’ve been running into problems setting up code for projects that require direct interaction with files and directories on my/a user’s computer. R has plenty of functions to facilitate this, but they are scattered throughout several packages and often have rather uninformative names. If you know what you are looking for (or in my case, have a supervisor that does) then a quick Google search can find a function that does the job. However, if you don’t know what you want, or at least not in “computer terms”, then there is not (to my knowledge) any sort of catalogue of functions that you can browse. Here, I’m hoping to help fill that gap. These functions are really useful when you are building functions and packages of your own. For example, I was building a new module for the zoon package that required access to R Markdown templates without the templates existing as actual files (modules in the zoon package have to be self-contained within a single script file). Using these functions I was able to achieve this by saving the templates as character strings in the script file, turn them into files (using tempfile()) in a temporary directory on the user’s computer (using tempdir()), use them as intended, and then remove them (using unlink()) so it doesn’t take up space on the user’s computer. Here I have tried to split these functions into broad categories: Information, Creation, Modification, Deletion, and a catch-all Miscellaneous for anything left over. All of these functions (at least at the time of first publication) are either in base R or the utils and R.utils packages. 6.2 Information Sometimes you don’t need to be doing anything to files and/or directories and just want some information about them. Maybe you only want to find the a file path, check read/write/execute permissions, or test to see if a directory exists? The functions in this section are information gatherers. Sys.info(): This reports system and user information file.info(): This function returns information about the selected file/directory including its size (in bytes), time of creation, time last modified, and time last accessed. file.show(): This will display one or more text files (e.g. in RStudio on Windows it opens a .Rmd file as a new script) list.files(): This lists all files in the working directory list.dirs(): This lists all directories in the working directory listDirectory(): This lists all files, like list.files(), but is guaranteed to work recursively browseEnv(): This opens a browser with a list of objects currently in the sys.frame() environment basename(): This removes all of the file path up to and including the last path separator (if any) dirname(): This return the file path up to but excluding the last path separator (or “.” if there is no path separator) displayCode(): This displays the contents of a text file with line numbers fileAccess(): This tests for various permission about a file. There is a file.access() function in base R but it cannot be trusted on all OS platforms getAbsolutePath(): This returns the absolute file path for a file/directory and not just relative to the working directory getRelativePath(): This returns the file path relative to the working directory lastModified(): Returns the time and date when the file was last modified Sys.time(): This returns the current time and date Sys.timezone(): This returns the time zone of the user’s system normalizePath(): Returns the absolute file path for a file file.choose(): Get the file path to a file chosen interactively (opens a new window) 6.2.1 Testing A subset of these Information functions are those that perform tests. These functions test for the existence of a file and/or directory. This is useful for functions that rely on a user having some external file (like maxent.jar for ecologists fitting a MaxEnt model), or when saving outputs to a user’s computer and either don’t want to overwrite an existing file, or want to save it in a subdirectory that gets created if it does not already exist. file.exists(): Returns a logical vector indicating whether the named files exist dir.exists(): Returns a logical vector indicating whether the named directories exist isAbsolutePath(): Returns a logical vector indicating whether the named file path is absolute isDirectory(): Returns a logical vector indicating whether the named file path is a directory isFile(): Returns a logical vector indicating whether the named file path is a file isOpen(): Returns a logical vector indicating whether the file has open connections isUrl(): Returns a logical vector indicating whether the pathnames are URLs 6.3 Creation This section covers the functions that create files and directories on the user’s computer. These are useful for saving outputs (as .png/.pdf/.html/etc.) as well as storing things temporarily. file.create(): This creates files with the given name if they do not already exist, or truncates them if they do file.copy(): This copies a file from one location to another dir.create(): This creates a directory in the given location mkdir(): A wrapper around dir.create() designed for large shared file systems copyDirectory(): This copies a directory from one location to another tempfile(): This creates a temporary file tempdir(): This creates a temporary directory createFileAtomically(): This creates a file atomically by first creating a temporary file and then renaming it file.path(): This constructs the path to a file from components in an OS-independent manner jpeg(): Creates a .jpg file bmp(): Creates a .bmp file png(): Creates a .png file tiff(): Creates a .tif file pdf(): Creates a .pdf file 6.4 Modification This section covers the functions that modify existing files. This includes changing file permissions, renaming files, and adding to files. These could be useful for things as small as fixing spelling mistakes, or for larger jobs within automated tasks such as appending the results of analyses in loops to a single file. file.rename(): Rename a file file.append(): Appends the files named in the second argument to those named in the first argument Sys.chmod(): Sets the permissions for a file touchFile(): Updates the last modified time for a file to the current time 6.5 Deletion This section covers the functions that delete files and directories. These are useful cleaning purposes (especially if using temporary files/directories) to prevent wasting disk space, or deleting files before creating a new version in situations where over-writing the file is not guaranteed to work correctly. However, you must be very careful about what you delete (I have no idea if R will let you do the old delete System32 trick, but I sure wont be trying it out). When creating code for others to use (like an R package) it is safest to use a combination of tempfile()/tempdir() and file.copy() to create things as temporary files and copying them to the user’s working directory then delete the temporary files/directories rather than creating straight into the user’s working directory as you don’t know how they structure their workspace as you don’t want to risk overwriting or deleting existing files. file.remove(): Removes the specified file removeDirectory(): Removes the specified directory (and, if requested, its contents) unlink(): Deletes the specified file/directory 6.6 Miscellaneous This section is a catch-all for functions that interact with files/directories that don’t fit into the above categories and functions that can be used in tandem with some of the above sections. Sys.glob(): This function let you use wildcard expansion (aka “globbing”) on file paths i.e. \"test*\" means all files starting with “test” glob2rx(): This function changes wildcard patterns into the corresponding regular expression grep()/grepl()/regexpr()/gregexpr()/regexec(): Search for matches to patterns within elements of a string agrep(): Searches for approximate matches to patterns within elements of a string apropos(): Returns a character vector giving the names of objects in the search list matching a regular expression (or approximately matching) sub()/gsub(): Substitutes first or all values, respetively, within elements of character strings that match the specified pattern. Can be used with regular expressions capitalize()/decapitalize(): Capitalise/decapitalise the first letter of each character string in a vector toCamelCase(): Converts a string of words into a merged camel-cased word save*(): There are multiple save functions (e.g. saveObject() or savePlot()) that save something to a specified file load*(): There are multiple load functions (e.g. load() or loadObject()) that load something from a specified file Sys.sleep(): Suspends execution of R expressions for a specified time interval 6.7 Closing Thoughts This is by no means an exhaustive list of functions to directly interact with files/directories in R, and I welcome suggestions of new functions, but I hope it serves as a reference for anyone facing the same issues I had. "],
["rstudio-tips-and-tricks.html", "7 RStudio Tips and Tricks 7.1 Global Options 7.2 Keyboard Shortcuts 7.3 Code Folds 7.4 R Projects 7.5 Terminal", " 7 RStudio Tips and Tricks NB: This guide assumes you are using RStudio v1.1 or later 7.1 Global Options The Global Options menu (found in the Tools drop-down menu) allows you to customise the RStudio interface. This includes both aesthetic and functionality changes. Appearance menu: + Change your IDE colour schemes with RStudio themes + Change your text colour schemes with Editor themes + Change your font with Editor fonts. Ligature-enabled fonts (none of the default fonts) let multi-character symbols like &lt;- be displayed as a single character Pane Layout menu: + Lets you customise where each panel is displayed + Lets you move tabs between panes + Restricted to a 4x4 grid Code menu: + Completion tab: Use tab for multiline autocompletions. Check this box to enable tab autocompletion of function calls over multiple lines + Diagnostics tab: Check arguments to R function calls. Check this box and R will show warning/error messages for missing arguments with no default values, and missing/additional commas/brackets Warn if variable has no definition in scope. Check this box and R will show warning messages if variable names supplied to a function aren’t defined anywhere. Picks up on spelling errors like Variable1 instead of variable1 Warn if variable is defined but not used. Check this box and R will show warning messages for defined variables that are never used Provide R style guide diagnostics. Check this box and R will show warning messages where you don’t adhere to Hadley Wickham’s style guide 7.2 Keyboard Shortcuts RStudio has a slew of keyboard shortcuts to make life easier. Alt+Shift+K brings up the menu, or they are available under the Tools drop-down menu. Some useful ones: Ctrl+&lt;Number&gt;: Move focus to pane/tab corresponding to &lt;Number&gt;. Most useful are Ctrl+1 for Source and Ctrl+2 for Console Ctrl+Shift+&lt;Number&gt;: Maximise the pane/tab corresponding to &lt;Number&gt; Ctrl+Ent: Run selected line(s) Alt+Ent: Run selected line(s) without moving cursor Ctrl+Shift+P: Re-run previous line(s). Lets you change values between runs. Ctrl+I: Re-indent selected lines Ctrl+Shift+C: Comment/uncomment selected lines Alt+-: Insert &lt;- Ctrl+Shift+M: Insert %&gt;% Ctrl+L: Clear console F1: Bring up help file for selected function name F2: Bring up source file for selected function name 7.3 Code Folds Code folds allow you to hide/show chunks of code in a script file to make navigating scripts easier. You might already be familiar with these since RStudio uses them automatically for braced regions like for loops/if statements/user-defined functions. They show up as small triangles next to the line numbers. You can manually add code folds with comment lines that include at least four trailing dashes -, equal signs =, or hashes #. This will then let you hide all code between two lines with code folds. There is no set structure to code folds beyond this so you can work them into section headers to create a neat document. Folded sections show up in the Jump To menu at the bottom of the script editor making it easy to navigate big documents. Example folds: #---- #==== ##### # Section 1 ---- ## Section 1a ---- # Load Data =========================== #### Plotting #### 7.4 R Projects R projects are a neat way of encompassing an entire set of work. Some of the benefits to this are: Relative filepaths. No more using setwd() or read.csv(\"C:/Users/Person/Documents/Folder/Folder2/Folder3/Data/File.csv\")! When you re-open a project file the RStudio session is exactly as you ended it. The scripts you had open are still open, and .RData is loaded sothe variables are still stored in the environment (so you don’t have to re-run code). However, packages need to be reloaded and the Plots pane is emptied. Version control. R projects can be set up with version control software like git. RStudio has a two ways to interact with git: a Terminal (covered later) and a point and click GUI interface. We will probably cover this in a future Coding Club session. 7.5 Terminal RStudio now has an in-built Terminal which allows access to the system shell within the RStudio IDE. For computers that don’t have a built-in Terminal (e.g. Windows), then you will need to install something like Git-Bash (might come with newer versions of RStudio). The Terminal can be used for things like version control with git, remote logins, compiling python code, etc. "],
["batch-r-job-submission-on-spartan.html", "8 Batch R job submission on Spartan 8.1 Introduction 8.2 Batch submission using Spartan’s slurm files 8.3 Examples 8.4 Advanced: Computational requirements dependant on input parameters 8.5 Advanced: Jobception - Submitting jobs that submit more jobs", " 8 Batch R job submission on Spartan 8.1 Introduction One of the problems that researcher’s encounter when performing computational analyses is the potentially massive number of model runs to be completed. This could happen by repeating the same process hundreds or thousands of times, running simulations with different combinations of starting parameters, or model comparisons across multiple datasets. If each of these permutations takes a non-trivial amount of time to run (hours are common, but day- or week-long runs are not unreasonable for more complex analyses), then the total duration could be impractical. 100 simulations that take one day each will take three months to complete! There are several further downsides here as it can tie up a work computer for extended lengths of time, it risks failing if something goes wrong with the computer in that time (e.g. power outage), and potentially relies on manual inputs to ensure each permutation is run. My Spartan Introduction [needs a link] already shows us the benefits of high performance computing for getting past time and memory limits of single jobs, but this guide takes the next step and shows you how to automate the batch submission of multiple jobs. This guide is split into three sections: Batch submission using Spartan’s slurm files Modifying your R scripts to account for batch submision Some simplified examples of different approaches to batch submission 8.2 Batch submission using Spartan’s slurm files Submitting jobs to Spartan involves interfacing with the slurm workload manager. This is done by creating a slurm file that establishes the computational resource requirements of the job and contains the commands required to run the job (this is the job submission script). Batch submitting jobs to Spartan requires a second slurm file (the batch submission script) that handles the creation of the different permutations and then calls the first slurm file once per permutation. The batch submission process makes use of command line arguments to control the passing of parameters from script to script. Using command line arguments means we can define the overall process like this: Define the combination of input parameters for each permutation in the batch submission script For each permutation the batch submission script submits the job submission script with the input parameters defined as command line arguments The job submission script takes those input parameters and passes them as command line arguments to the R script The R script reads those command line arguments and uses them to define variables to control how the script operates 8.2.1 Creating the batch submission script The batch submission script is where we define the different combinations of parameter inputs and the easiest way to do this is with for loops. You might already be familiar with writing for loops in R, but here we need to write them in bash which follows a different syntax. To highlight this, here are two examples of a for loop printing the numbers 1-10 to screen using R and bash: for(i in 1:10){ print(i) } for i in {1..10} do echo $i done If you have more than one input parameterbash for loops can be nested in the same manner as R for loops: for i in {1..10} do for j in {1..10} do echo $i echo $j done done So what does a batch submission script look like? Aside from the for loops, there are two more components in the script: The #!/bin/bash required on the first line of the file to tell the shell what interpretor to run (in this case, bash) An sbatch command to call the job submission script for each parameter combination. This command submits the job to Spartan’s queue. This is also where we pass on the input parameters as command line arguments. The syntax broadly looks like this sbatch file_path/file argument1 argument 2. It is important to note the use of $ to extract the value of the variable stored in the loop iterator. Command line arguments do not have names, they are just values, so you need to use the value of the iterator instead of the iterator itself. If we want to submit the same job one hundred times then the batch submission script will look something like this: #!/bin/bash for i in {1..100} do sbatch file_path/job_submission.slurm $i done If we need to do something more complex where we submit a job for each combination of multiple input parameters then we use nested for loops. If we have two input parameters it would look like this: #!/bin/bash for i in {1..10} do for j in {1..10} do sbatch file_path/job_submission.slurm $i $j done done 8.2.2 Creating the job submission script The job submission script is built more or less the same way for batch submission as it is for single jobs. There are two main differences: Defining the command line arguments that are recieved by the job submission script Passing the command line arguments that are sent to the R script Addressing the first difference can be optional, as it can be done as part of the second, but for clarity it is best to handle it separately. The command line arguments are stored as variables names 1, 2, etc so we can re-define as variables like this: i = $1 j = $2 Passing them onto the R script is done the same way as the passing them from the bash submission script to the job_submission script. Rscript --vanilla file_path/file.R $i $j Putting it together the whole script will look something like this for an R script with no additional dependencies: #!/bin/bash # #SBATCH --nodes=1 # #SBATCH --ntasks=1 # #SBATCH -p physical # #SBATCH --mem=10000 # #SBATCH --time=1:00:00 # #SBATCH --mail-user=email_here #SBATCH --mail-type=ALL,TIME_LIMIT_50,TIME_LIMIT_80,TIME_LIMIT_90 i=$1 j=$2 module purge module load r/3.6.0 cd directory_path Rscript --vanilla file_path/file.R $i $j 8.2.3 Modifying an R script to use command line arguments The final step in the process is using these command line arguments you pass into the R session. These arguments are not as readily accessible in R as they are in bash, but R does have a handy commandArgs() function to simplify the process. commandArgs() will provide you with a character vector of all of the command line arguments passed into the R session. R sessions will normally have some arguments passed in by default that were not defined by you, so you want to extract only what are known as trailing arguments (those defined by the user). This is done using the trailingOnly argument like this: command_args &lt;- commandArgs(trailingOnly = TRUE) As noted above, this returns a character vector so you want to convert the individual arguments back to numerics when you define them: i &lt;- as.numeric(command_args[1]) j &lt;- as.numeric(command_args[2]) At this point, you’ve successfully passed the command line arguments into R and are free to run the rest of the script as normal. Success! However, it is not always the case that your input parameters are numeric data (could be characters like dataset names). It is possible to use characters as command line arguments, but it is far easier to use numeric data in bash for loops than character data. To this end it is easier to use your command line arguments as an index variable and then use it to look up the correct value from a character vector in the R session. For example, if we want to fit the same model to five different datasets our batch submission script would look like this: #!/bin/bash for i in {1..5} do sbatch file_path/job_submission.slurm $i done And then we would do this in our R script: command_args &lt;- commandArgs(trailingOnly = TRUE) dataset_index &lt;- as.numeric(command_args[1]) dataset_options &lt;- c(&quot;birds&quot;, &quot;fish&quot;, &quot;frogs&quot;, &quot;monkeys&quot;, &quot;wolves&quot;) dataset_id &lt;- dataset_options[dataset_index] And now we can use the character variable dataset_id in the R session. 8.3 Examples Here I provide some simplified examples of the most common batch submission approaches. To keep the examples succint the R code will be fairly simple but the important features will be there. It will be straight forward to adapt any of them to your own code. Since this guide is intended for Spartan users (although applicable to any slurm environment) all of the file paths will be based on Spartan’s directory structure. [project_id] in any file path refers to your personal project directory e.g. punim123. 8.3.1 One input variable The simplest case of batch submission is to run the same process multiple times. The usual scenario for this approach is running independent simulations as separate jobs. The important word here is independent, as this wont work for simulations that are dependent on those completed before it. The below example represents a batch submission for 300 simulations of an analysis (here, generating a random number). Example batch submission script: batch_submission.slurm for simulation in {1..300} do sbatch /data/gpfs/projects/[project_id]/scripts/slurm/job_submission.slurm $simulation done Example job submission script: job_submission.slurm #!/bin/bash # #SBATCH --nodes=1 # #SBATCH --ntasks=1 # #SBATCH -p physical # #SBATCH --mem=10000 # #SBATCH --time=1:00:00 # #SBATCH --mail-user=email_here #SBATCH --mail-type=ALL,TIME_LIMIT_50,TIME_LIMIT_80,TIME_LIMIT_90 simulation=$1 module purge module load r/3.6.0 cd /data/gpfs/projects/[project_id] Rscript --vanilla scripts/R/script.R $simulation Example R script: script.R # Read the command line arguments command_args &lt;- commandArgs(trailingOnly = TRUE) # Define command line arguments as a variable simulation &lt;- command_args[1] # Perform analysis set.seed(simulation) value &lt;- rnorm(1) # Create job-specific output so we don&#39;t overwrite things! filename &lt;- sprintf(&quot;outputs/simulation_%s.rds&quot;, simulation) saveRDS(object = value, file = filename) 8.3.2 Two or more input variables More complex batch submissions will have multiple input parameters. These could be dataset names and cross validation fold ID, different starting parameters for population dynamics simulations, a series of coordinates to split up a big spatial analsis into more manageable chunks, etc. Regardless of your scenario, the method is the same. The below example represents batch submission for all combinations of two different input values for a population dynamics simulation. Note that the actual values of these inputs are not defined until we reach the R script, instead we use the for loop iterators in the bash script to control the index of the input values. Here we assume four different population starting sizes and five different net growth rates. NB: This is a super abstract version of a population dynamics simulation that in reality are far more complex. This example just records the population each year assuming a stable net growth rate. Example batch submission script: batch_submission.slurm for pop_start_size in {1..4} do for growth_rate in {1..5} do sbatch /data/gpfs/projects/[project_id]/scripts/slurm/job_submission.slurm $pop_start_size $growth_rate done done Example job submission script: job_submission.slurm #!/bin/bash # #SBATCH --nodes=1 # #SBATCH --ntasks=1 # #SBATCH -p physical # #SBATCH --mem=10000 # #SBATCH --time=1:00:00 # #SBATCH --mail-user=email_here #SBATCH --mail-type=ALL,TIME_LIMIT_50,TIME_LIMIT_80,TIME_LIMIT_90 pop_start_size=$1 growth_rate=$2 module purge module load r/3.6.0 cd /data/gpfs/projects/[project_id] Rscript --vanilla scripts/R/script.R $pop_start_size $growth_rate Example R script: script.R # Read the command line arguments command_args &lt;- commandArgs(trailingOnly = TRUE) # Define command line arguments as a variable ## Define index pop_start_size_index &lt;- command_args[1] growth_rate_index &lt;- command_args[2] ## Define options pop_start_size_options &lt;- c(1000, 2000, 5000, 10000) growth_rate_options &lt;- c(-0.001, -0.01, 0.001, 0.01, 0.02) ## Extract parameter values pop_start_size &lt;- pop_start_size_options[pop_start_size_index] growth_rate &lt;- pop_start_size_options[pop_start_size_index] # Perform analysis set.seed(28041948) ## Create vector to store results pop_vector &lt;- vector(length = 50) ## Simulate population trajectory for(year in 1:50){ if(year == 1){ pop_size &lt;- pop_start_size pop_vector[year] &lt;- pop_size } else { pop_size &lt;- pop_size + (pop_size * growth_rate) pop_size &lt;- ifelse(pop_size &lt; 0, 0, pop_size) pop_vector[year] &lt;- pop_size } } # Create job-specific output so we don&#39;t overwrite things! filename &lt;- sprintf(&quot;outputs/simulation_%s_%s.rds&quot;, pop_start_size, growth_rate) saveRDS(object = value, file = filename) 8.4 Advanced: Computational requirements dependant on input parameters Depending on the nature of your batch submission jobs you might want the ability to set different computational requirements for each job. If you’re submitting identical jobs multiple times (a split up simulation for example) then you probably want consistent requirements. However, if you’re applying the same process but over multiple datasets/models of differing size and/or complexity then job-specific requirements are ideal. Jobs with larger resource requirements take longer to leave the queue on Spartan and you’re not going to be able to run as many jobs simultaneously. If you set consistent requirements then small jobs waste resources (and potentially take longer to start) and/or large jobs fail by exceeding memory limits or wall times. Thankfully we are able to set job-specific requirements by making use of the fact that there are two methods for setting these parameters. The usual method is by using #SBATCH commands in our slurm script (like #SBATCH --time=1:00:00). The other method is that we can use those same slurm command flags (the options following either - or --) directly in the sbatch command that submits the slurm sript. Conveniently we can use both simultaneously. The best way to approach this is by using #SBATCH to control parameters that never change (for example, setting the email address for progress emails) and sbatch to control parameters that do change (for example, memory limits or wall times). The #SBATCH approach has been covered earlier so we only focus on the sbatch approach here. Our batch submission script uses for loops to control the input parameters to our job submission script, and we use that in conjunction with if statements to set computing requirement parameters for the sbatch command. Both the for loops and if statements will be written in bash so they will differ from R’s syntax but work in the same way. A simple example is the easiest way to explain this approach, so lets imagine a scenario where we are submitting just two jobs (same job, different dataset) and want different memory limits for each one. Our batch submission script might look like this #!/bin/bash for dataset in {1..2} do if [ $dataset = &quot;1&quot; ] then MEMORY=10000 fi if [ $dataset = &quot;2&quot; ] then MEMORY=20000 fi sbatch --mem=$MEMORY job_submission.slurm $dataset done In this case we are only making the memory request job-specific and things like the partition, wall time, number of CPUs, etc will be controlled inside job_submission.slurm using #SBATCH commands. We’ve seen how nested for loops can be used to more complex job submission processes and we can apply the same method here. This time we have two datasets that will determine memory limits, ten models that will determine partition, a third parameter called fold that will have no impact on computing requirements, and then use the three parameters together to both give our job a specific name and name our slurm.out file. #!/bin/bash for dataset in {1..2} do for model in {1..10} do for fold in {1..5} do ## Control memory requirements with the dataset parameter if [ $dataset = &quot;1&quot; ] then MEMORY=10000 fi if [ $dataset = &quot;2&quot; ] then MEMORY=20000 fi ## Control partition requests with the model parameter. ## Lets set all models except 7 to run on the cloud. if [ $model = &quot;7&quot; ] then PARTITION=&quot;physical&quot; else PARTITION=&quot;cloud&quot; fi ## Create a job name based on the three input parameters ## Use the format of &quot;Job_1_1_1&quot; ## We need to use ${} and not just $ to call the variables names ## because they re proceeded by a _ JOB_NAME=&quot;Job_${model}_${dataset}_${fold}&quot; ## Name our slurm.out file and put it in a specific place OUT_NAME=&quot;outputs/slurm_outputs/Job_${model}_${dataset}_${fold}.out&quot; ## Now run sbatch to submit the job_submission.slurm script ## 1. Set sbatch details using the flags/options ## 2. Say which file to run ## 3. Don&#39;t forget to also pass on the input parameters! sbatch --mem=$MEMORY -p=$PARTITION --job-name=$JOB_NAME --output=$OUT_NAME scripts/job_submission.slurm $dataset $model $fold done done done 8.5 Advanced: Jobception - Submitting jobs that submit more jobs Sometimes you have jobs that need to split up after they have run at least partially in R. You might have a single job that loads the data and fits a model but then the post-processing is large and can be split into multiple jobs (for example, handling Bayesian posterior samples independently). While there is the functionality built in to slurm so that you can tell jobs not to run until after certain other jobs are finished, it is easier to handle this inside R. R has the system() function that lets you run code on the command line from within your R session. This is the same command line that you interact with directly on Spartan for everything else! This means that you can run sbatch commands for job submission directly from your R script. As an example, lets pretend we have a R script to fit some sort of Bayesian regression model that results in 1000 posterior samples and we want to split up our post-processing into chunks of 10 samples each. After the model fitting portion of the script we can use the system() function to submit more jobs that are told to only process samples X through Y. What we do is create a for loop in R to handle creating the start and end sample IDs and pass them as command line arguments into a new job. Here we use the sprintf() function to build our sbatch command using these parameters but you could also use paste() if you prefer. ## Read command lnie arguments passed into main job command_args &lt;- commandArgs(trailingOnly = TRUE) ## Define index parameter_1 &lt;- command_args[1] parameter_2 &lt;- command_args[2] ## Pretend we load a dataset based on parameter_1 data &lt;- load_data(parameter_1) ## Pretend we set a prior based on parameter_2 prior &lt;- set_prior(parameter_2) ## Fit Model n_samples &lt;- 1000 big_Bayes_model &lt;- big_Bayes_function(data, priors, n_samples) ## Save model to file saveRDS(big_Bayes_model, &quot;filename_here&quot;) ## Submit new jobs for(i in seq(1, n_samples, 10)){ ### Define start and end sample IDs for the sub jobs start_sample &lt;- i end_sample &lt;- i + 9 ### Build a system command based on these values command &lt;- sprintf(&quot;system(&#39;sbatch -p physical --cpus-per-task=1 --mem=51200 --time=10-00 --job-name=N_%1$s_%2$s scripts/sub_job_submission %1$s %2$s&#39;)&quot;, start_sample, end_sample) ### Run this command eval(parse(text = command)) } "]
]
